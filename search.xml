<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[极限压缩选项]]></title>
    <url>%2F2017%2F11-22-extremecompress%2F</url>
    <content type="text"><![CDATA[压缩等级选LZMA2，其它默认即可。 字典大小对压缩率没什么影响，只是影响软件占用内存跟时间。 单词大小是影响纯文字的文本文件那些的，压缩速度越慢,但不影响解压速度。 固实数据大小的作用是影响在大批量文件压缩包解压几个零散文件需要解包的大小。]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>极限压缩</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派-编译内核]]></title>
    <url>%2F2017%2F11-07-compile-kernel%2F</url>
    <content type="text"><![CDATA[编译内核 12345git clone -b rpi-4.9.y --depth=1 https://github.com/raspberrypi/linux /usr/src/kernels/rpi-4.9/ //-b指定分支，这里选4.9；--depth=1只克隆最新版本cd /usr/src/kernels/rpi-4.9/sudo make menuconfigmake all //编译后的文件放在当前目录make modules_install //安装内核模块/lib/modules 有三个重要的目录或文件，kernel7.img modules/* dts/* ,将其复制到/boot下 12345sudo cp kernel7.img /boot/sudo cp modules/4.9* /lib/modulessudo cp dts/*.dtb /boot/sudo cp dts/overlays/*.dtb* /boot/overlays/sudo cp dts/overlays/README /boot/overlays/ 报错1： 123456789In file included from scripts/kconfig/mconf.c:23:0:scripts/kconfig/lxdialog/dialog.h:38:20: fatal error: curses.h: No such file or directory #include CURSES_LOC ^compilation terminated.scripts/Makefile.host:124: recipe for target 'scripts/kconfig/mconf.o' failedmake[1]: *** [scripts/kconfig/mconf.o] Error 1Makefile:546: recipe for target 'menuconfig' failedmake: *** [menuconfig] Error 2 解释：缺少ncurses dev工具 解决： sudo aptitude install libncurses5-dev 报错2： 12345/bin/sh: 1: bc: not foundKbuild:67: recipe for target 'include/generated/timeconst.h' failedmake[1]: *** [include/generated/timeconst.h] Error 127Makefile:1036: recipe for target 'prepare0' failedmake: *** [prepare0] Error 2 解释：没安装bc这个高精确度数学运算工具 解决：sudo aptitude install bc 常用命令： 123456make mrproper //会把以前进行过的内核功能文件也删除掉，几乎只有在第一次执行内核编译前才会进行这个操作make clean //仅会删除类似目标文件之类的编译过程产生的中间文件，而不会删除配置文件make vmlinux //未经压缩的内核；常见的/boot下的内核文件都是经过压缩的make bzImage //编译内核，经过压缩的内核make modules //编译内核模块make all //进行上述三个操作]]></content>
      <categories>
        <category>Linux</category>
        <category>Kernel</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Kernel</tag>
        <tag>Compile</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[资源监视器]]></title>
    <url>%2F2017%2F11-06-monitor%2F</url>
    <content type="text"><![CDATA[monitorix XavierBerger/RPi-Monitor firehol/netdata spoonysonny/pi-dashboard novaspirit/rpi_conky]]></content>
      <categories>
        <category>Linux</category>
        <category>Monitor</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Monitor</tag>
        <tag>Dashboard</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codepen]]></title>
    <url>%2F2017%2F11-05-codepen%2F</url>
    <content type="text"><![CDATA[See the Pen Fete-Of-The-World by qcsunny (@qcsunny) on CodePen. 直接在https://codepen.io/qcsunny/pen/XeLLoy右下角选择Embed，然后调整高度，复制html内容至md文件即可 参考文章： https://raincal.top/2017/07/02/Fete-Of-The-World/]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Establish</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ryzen超频折腾记]]></title>
    <url>%2F2017%2F11-01-Ryzen%E8%B6%85%E9%A2%91%E6%8A%98%E8%85%BE%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[日常使用: CPU超频 CPU 1.3v@3.8GHz 内存超频 RAM 1.42v@3333MHz C14 (软件检测实际电压为1.408v) 折腾: CPU 1.4125v@3.95GHz CPU 1.3875v@3.9GHz/3.925GHz CPU 1.3625v@3.875GHz CPU 1.325v@3.85GHz CPU 1.3125v@3.825GHz CPU 1.3v@3.8GHz CPU 1.275v@3.775GHz CPU 1.25v@3.75GHz CPU 1.225v@3.725GHz CPU 1.2125v@3.7GHz RAM 1.37v@3200MHz C14 (软件检测实际电压为1.36v) 内存超频以及更新BIOS后，默认SOC电压均在0.95-1.1v，可能会造成显卡掉驱动，蓝屏等问题 就多数主板而言，SOC电压1.17v是cpu超频能力最强的电压值。如果主板cpu显卡能承受，3.9g以上的频率建议取此电压 电脑概览 1234567891011电脑型号 微星 MS-7A37 Low Profile Desktop (扫描时间：2017年11月05日)操作系统 Windows 10 专业版 64位 ( 4.09.00.0904 ) 处理器 AMD Ryzen 7 1700 Eight-Core Processor 八核主板 微星 B350M MORTAR (MS-7A37) ( AMD PCI 标准主机 CPU 桥 )内存 16 GB ( 影驰 DDR4 3000MHz )主硬盘 三星 MZVLW2560K1Q ( 256 GB / 固态硬盘 )显卡 Nvidia GeForce GTX 650 ( 1 GB / 华硕 )显示器 戴尔 DELD072 DELL U2515H ( 24.9 英寸 )声卡 瑞昱 ALC892 @ AMD High Definition Audio 控制器网卡 瑞昱 RTL8168/8111/8112 Gigabit Ethernet Controller / 微星 CPU信息 12345678910处理器 AMD Ryzen 7 1700 Eight-Core Processor 八核速度 3.75 GHz (100 MHz x 38.0)处理器数量 核心数: 8 / 线程数: 16生产工艺 14纳米插槽/插座 Socket AM4一级数据缓存 32 KB, 16-Way, 64 byte lines一级代码缓存 64 KB, 4-Way, 64 byte lines二级缓存 8 x 512 KB, 8-Way, 64 byte lines三级缓存 16 MB, 16-Way, 64 byte lines特征 MMX+, SSE, SSE2, SSE3, SSSE3, SSE4A, SSE4.1, HTT, X86-64 内存超频参数 第一时序 时序 数值 含义 Command Rate 1 tCL 14 tRCDRD 14 tRCDWR 14 tRP 14 tRAS 34 副时序(第二时序) 时序 数值 tRC 48 tRCPAGE 0 tRFC 312 tWR 20 tWTR_S 4 tWTR_L 8 tRRD_S 5 tRRD_L 5 tRTP 8 tFAW 20 tCWL 12 tCKE 4 第三时序 时序 数值 tRDRDSC_L 4 tRDRDSC 1 tRDRDSD 4 tRDRDDD 4 tWRWRSC_L 4 tWRWRSC 1 tWRWRSD 6 tWRWRDD 6 tRDWR 8 tWRRD 1 pwm风扇默认: 85°C 100% 70°C 63% 55°C 38% 40°C 13% 参考文章： 部分资料来源某群风清/盐水狐狸等经验指导]]></content>
      <categories>
        <category>Hardware</category>
        <category>Computer</category>
      </categories>
      <tags>
        <tag>Ryzen</tag>
        <tag>Overclock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何正确的写一篇Makedown博文]]></title>
    <url>%2F2017%2F10-31-%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%86%99%E4%B8%80%E7%AF%87Makedown%E5%8D%9A%E6%96%87%2F</url>
    <content type="text"><![CDATA[标题 在 Markdown 中，你只需要在文本前面加上 # 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 # 即可，标题字号相应降低。例如： 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。 分隔线 在一行连续使用三个或以上下划线_或*: 12___*** 列表 列表格式也很常用，在 Markdown 中，你只需要在文字前面加上-就可以了，例如： 123- 文本1- 文本2- 文本3 文本1 文本2 文本3 如果你希望有序列表， 也可以在文字前面加上1.就可以了，例如： 1231. 文本11. 文本21. 文本3 文本1 文本2 文本3 注：1.和文本之间要保留一个字符的空格。 链接 Markdown有两种链接方式：Inline（行内式）以及Reference（参考式） 1[显示文本](链接地址) 或 12[显示文本][1][1]:链接地址 12345678910Inline:[百度](https://www.baidu.com) Reference:我经常去的几个网站[Baidu][1]、[Leanote][2]以及[自己的博客][3][Leanote 笔记][2]是一个不错的[网站][]。[1]:http://www.baidu.com &quot;Baidu&quot;[2]:http://www.leanote.com &quot;Leanote&quot;[3]:http://http://blog.leanote.com/freewalk &quot;梵居闹市&quot;[网站]:http://http://blog.leanote.com/freewalk Inline: 百度 Reference: 我经常去的几个网站Baidu、Leanote以及自己的博客 Leanote 笔记是一个不错的网站。 图片 1![显示文本](图片链接地址) 或 12![显示文本][1][1]:图片链接地址 例如： 1![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 注：插入图片的语法和链接的语法很像，只是前面多了一个 ！。 显示链接中带括号的图片 使用第二种方法，注意序号 12![][1][1]: http://latex.codecogs.com/gif.latex?\prod%20\(n_&#123;i&#125;\)+1 或者用 1&lt;img src=&quot;http://latex.codecogs.com/gif.latex?\prod(n_&#123;i_1&#125;)+1&quot;&gt; 引用 在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上&gt;就好了，可以嵌套使用，例如： 12&gt; 一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 &gt;&gt; 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。 一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。 注：&gt; 和文本之间要保留一个字符的空格，标准用法。 粗体和斜体 Markdown 的粗体和斜体也非常简单，用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。例如： 1*一盏灯*， 一片昏黄；**一简书**， 一杯淡茶。 一盏灯， 一片昏黄；一简书， 一杯淡茶。 代码引用 需要引用代码时，如果引用的语句只有一段，不分行，可以用 ` 将语句包起来。 如果引用的语句为多行，可以将```置于这段代码的首行和末行。 每一行前边加入4个空格或者一个tab 表格 相关代码： 12345| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 自动创建链接 为输入的URL或邮箱自动创建链接； Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： 12&lt;http://example.com/&gt;&lt;address@example.com&gt; http://example.com/ address@example.com 任务列表 [x] @mentions, #refs, links, formatting, and tags supported [x] list syntax required (any unordered or ordered list supported) [x] this is a complete item [ ] this is an incomplete item 如果任务列表项目描述以圆括号开头，则需要通过以下方式将其解除\ [ ] (Optional) Open a followup issue 删除线 ~~ 我被删除了~~ 或者 tags 转义字符 Markdown中的转义字符为\，可以转义的有： 123456789101112\\ 反斜杠\` 反引号\* 星号\_ 下划线\&#123;\&#125; 大括号\[\] 中括号\(\) 小括号\# 井号\+ 加号\- 减号\. 英文句号\! 感叹号 \ 反斜杠 ` 反引号 * 星号 _ 下划线 {} 大括号 [] 中括号 () 小括号 # 井号 + 加号 - 减号 . 英文句号 ! 感叹号 数学公式支持 麦克斯韦方程组： \begin{eqnarray} \nabla\cdot\vec{E} &=& \frac{\rho}{\epsilon_0} \\ \nabla\cdot\vec{B} &=& 0 \\ \nabla\times\vec{E} &=& -\frac{\partial B}{\partial t} \\ \nabla\times\vec{B} &=& \mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t} \right) \end{eqnarray} H=−∑i=1N(σixσi+1x+gσiz)H=-\sum_{i=1}^N (\sigma_{i}^x \sigma_{i+1}^x+g \sigma_{i}^z) H=−​i=1​∑​N​​(σ​i​x​​σ​i+1​x​​+gσ​i​z​​) f(n)={n2,if n is even3n+1,if n is oddf(n) = \begin{cases} \frac{n}{2}, &amp; \text{if } n\text{ is even} \\ 3n+1, &amp; \text{if } n\text{ is odd} \end{cases} f(n)={​​2​​n​​,​3n+1,​​​if n is even​if n is odd​​ The Gamma function satisfying Γ(n)=(n−1)!∀n∈N\Gamma(n) = (n-1)!\quad\forall n\in\mathbb NΓ(n)=(n−1)!∀n∈N is via the Euler integral Γ(z)=∫0∞tz−1e−tdt.\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,. Γ(z)=∫​0​∞​​t​z−1​​e​−t​​dt. 行内式 3x−1+(1+x)2\sqrt{3x-1}+(1+x)^2√​3x−1​​​+(1+x)​2​​ 流程图支持 参考 https://github.com/bubkoo/hexo-filter-flowchart 安装 npm install --save hexo-filter-flowchart 在博客根目录nano _config.yml里添加 1234flowchart: # raphael: # optional, the source url of raphael.js # flowchart: # optional, the source url of flowchart.js options: # options used for `drawSVG` 例子： 例子： UML时序图支持 参考 https://github.com/wafer-li/hexo-filter-plantuml 安装 npm install --save hexo-filter-plantuml 例子： 例子： 例子： 下划线/emoji/下标/上标/脚注 参考 https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus 安装 12sudo npm uninstall hexo-renderer-marked --savesudo npm install hexo-renderer-markdown-it-plus --save 下划线 1++Inserted++ Inserted emoji 参考 https://www.webpagefx.com/tools/emoji-cheat-sheet/ https://github.com/markdown-it/markdown-it-emoji 短写： angry: [ ‘😠’, ‘😠’ ], blush: [ ‘😊’, ‘😊’ ], broken_heart: [ ‘💔’, ‘💔’ ], // :\ and :-\ not used because of conflict with markdown escaping confused: [ ‘😕’, ‘😕’ ], // twemoji shows question cry: [ “:’(”, “:’-(”, ‘😢’, ‘😢’ ], frowning: [ ‘😦’, ‘😦’ ], heart: [ ‘❤️’ ], imp: [ ‘👿’, ‘👿’ ], innocent: [ ‘😇’, ‘😇’, ‘😇’, ‘😇’, ‘😇’, ‘😇’ ], joy: [ “:’)”, “:’-)”, ‘😂’, ‘😂’, “😂”, “:’-D”, ‘😂’, ‘😂’ ], kissing: [ ‘:’, ':-’ ], laughing: [ ‘😆’, ‘😆’ ], neutral_face: [ ‘😐’, ‘😐’ ], open_mouth: [ ‘😮’, ‘😮’, ‘😮’, ‘😮’ ], rage: [ ‘😡’, ‘😡’ ], smile: [ ‘😄’, ‘😄’ ], smiley: [ ‘😃’, ‘😃’ ], smiling_imp: [ ‘😈’, ‘😈’ ], sob: [ “:,’(”, “:,’-(”, ‘😭’, ‘😭’ ], stuck_out_tongue: [ ‘😛’, ‘😛’ ], sunglasses: [ ‘😎’, ‘😎’ ], sweat: [ ‘😓’, ‘😓’ ], sweat_smile: [ ‘😅’, ‘😅’ ], unamused: [ ‘😒’, ‘😒’, ‘😒’, ‘😒’, ‘:′,′:−&#x27;, &#x27;:-​′​​,​′​​:−’ ], wink: [ ‘😉’, ‘😉’ ] 下标/上标 12H~2~0x^2^ H20 x2 底部强调标记色 markdown-it-mark ==mark== mark 脚注 You can create footnotes like this[1]. 印刷体支持 1(c) (C) (r) (R) (tm) (TM) (p) (P) +- © © ® ® ™ ™ § § ± toc&amp;anchor文章目录支持 参考 https://github.com/medfreeman/markdown-it-toc-and-anchor table of content，可能是next不支持文章内加[TOC]标记 abbr缩写支持 参考 https://github.com/markdown-it/markdown-it-abbr 1234*[HTML]: Hyper Text Markup Language*[W3C]: World Wide Web ConsortiumThe HTML specificationis maintained by the W3C. The HTML specification is maintained by the W3C.st=>start: Start e=>end op=>operation: My cond=>condition: Yes or No? st->op->cond->e cond(yes)->e cond(no)->op{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-0", options);st=>start: Start|past:>http://www.google.com[blank] e=>end: End:>http://www.google.com op1=>operation: My Operation|past op2=>operation: Stuff|current sub1=>subroutine: My Subroutine|invalid cond=>condition: Yes or No?|approved:>http://www.google.com c2=>condition: Good idea|rejected io=>inputoutput: catch something...|request st->op1(right)->cond cond(yes, right)->c2 cond(no)->sub1(left)->op1 c2(yes)->io->e c2(no)->op2->e{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-1-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-1", options); Here is the text of the footnote. //这句可放在文章底部 ↩︎]]></content>
      <categories>
        <category>Blog</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Makedown书写风格规范]]></title>
    <url>%2F2017%2F10-31-MakeDown%E4%B9%A6%E5%86%99%E9%A3%8E%E6%A0%BC%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[通用规则 文件 文件扩展名 使用 .md. 解释: 为什么不使用 .mkd 或者 .markdown? 更短 更加流行 没有明显冲突 文件名 文件名建议使用如下的风格: 用小写代替大写 把开头 the, a, an 除去 用连字符代替标点和空格 用一个连字符代替连续多个连字符，当多个连字符出现时，只使用一个 不在文件名前后使用连字符 建议使用: file-name.md 不建议, 多个连续的连字符: file--name.md 不建议, 包围的连字符: -file-name-.md 解释: 为何不使用下划线和驼峰大小写？连字符是现在最流行的网址分隔符，并且 Markdown 文件在上下文中经常使用: 可能在同一个项目中有连字符分割的HTML文件使用Markdown相同的目录。 文件名会被直接使用到 URL 中. 比如: GitHub blobs. 空白 新行 不要 使用连续两空行，也就是说，不要 连续使用两个换行符，除非是在代码块中不得已而必须出现。 以回车换行结束文件。不要 在文件结束时留下空行。 不要 在行尾留空格除非是在行尾空出两个空格插入换行符。 建议使用: 1234- list- list# Header 建议, 代码区块: 123456The markup language X requires you to use triple newlines to separate paragraphs: p1 p2 不建议： 12345- list- list# Header 解释: 多空行占用更多的竖直屏幕空间，并且会严重影响到可读性。 句子结束空格 句子结束使用一个空格 建议使用: 1First sentence. Second sentence. 不建议, 使用2个空格: 1First sentence. Second sentence. 解释: 相比于使用两个空格的优点: 容易编辑 通常不是必须的，如果使用 wrap:inner-sentence or wrap:sentence space-sentence:2 对可读性造成一种错误的感觉，因为忽略了输出的 HTML 文件。 容易查看一句话的结束 自动换行 尝试将一行限制在 80 个字符以下，将长段落按照以下的逻辑分开，例如: 句子: 一句话结束 . 之后, 问句问号 ? 或者感叹句 ! 之后 子句: 在单词 and, which, if … then, 逗号 , 之后 短语 phrases 一行中超过80个字符是可以接受的，但是记住长句子不适合阅读，并且在 git diff 中会很难看。 设置你的文本编辑器对 Markdown 文件一行不要 超过80字符，以免忘记。 建议使用: 1234This is a very very very very very very very very very very very very very long not wrapped sentence.Second sentence of of the paragraph,third sentence of a paragraphand the fourth one. 解释: Diffs 工具看起来更好, 因为一个子句的修改在 diff 工具中显示为一行修改. 临时的换行不会降低对 Markdown 文件的可读性， 因为唯一的语言特性，可以缩进表示层次结构的就是嵌套列表。 现在除了 GitHub 在 README 和评论中将单独一行解释成回车。 没有其他主流的解释引擎这么做，使用换行是非常安全的。 一些工具对较长的一行不友好，比如 Vim 并且 git diff 默认并不换行. 这些不友好都可以通过配置除去，对于git，使用 git config --global core.pager ‘less -r’ 对于Vim可以使用 set wrap 来自动换行. 缺点: 需要在写作时增加顾虑，尤其是在修改代码的时候。 Markdown 看起来和渲染输出不同, 输出没有换行符。 手动的换行可以让 Markdown 比生成的文档更加易读， 当然这样做的同时，也造成了一种虚假的可读性错觉，让人感觉没有长段落。 需要用户拥有使用可编程文本编辑器，类似 Vim，可以通过配置来换行。EditorConfig gave it WONTFIX 代码 Shell中美元符号 不要 在 shell 代码前加 $ 符号，除非你想要展示命令的输出。 如果目的是表明确切的语言，那么直接在代码前标明。 解释: 复制粘贴比较困难，不利于阅读。 建议使用: 12echo aecho a &gt; file 不建议： 12$ echo a$ echo a &gt; file 建议, 展示输出: 123$ echo aa$ echo a &gt; file 建议, 在代码前标明代码语言: 123Use the following Bash code:echo aecho a &gt; file 标记代码内容 使用代码块，或者行内代码： 可执行文件。 比如： 1`gcc` is the best compiler available. 注意将工具名字和项目工程名字区别开来。比如： gcc vs GCC. 文件路径 程序版本号 大写的缩写解释: 1xinetd stands for `eXtended Internet daemon` 其他和电脑相关的术语，想要单独标明 不要标记为代码： 项目名。 比如： GCC 函数库名。比如： libc, glibc 拼写和语法 使用正确的拼写和语法。 尽量选用英语，更准确的说美式英语。 解释: 美式英语使用者占有最大的GDP，尤其是在计算机行业。 类似 URL 或者代码，添加代码标记，这样拼写检查程序会自动忽略。 注意大小写敏感的拼写错误，尤其是项目名，品牌名，或者缩写。 建议使用: URL, LinkedIn, DoS attack 不建议： url, Linkedin, dos attack 一旦有疑惑，尽量选用和维基百科相同的缩写。 避免使用非正式的缩写: 建议使用: biography, repository, directory 不建议： bio, repo, dir 区块 换行符 避免使用换行符, 因为他们没有被广泛认可的语义。 在少数确实需要使用的时候，在行尾使用两个空格。 标题 atx风格 建议使用: 12345# Header 1## Header 2### Header 3 不建议： 1234567Header 1========Header 2--------### Header 3 解释: 相比 Setex 优势有: 容易书写，因为在 Setex 中，为了好看需要书写和标题相同数量的符号 可以生成所有的等级，而 Setex 只能生成两种等级 只占用一行，而 Setex 占用两行 更加明显。 Not very important if you have syntax highlighting. 在 # 和标题之间加入一个空格. 建议使用: 1# Header 不建议： 123#Header#..Header 不要 使用闭合的#. 建议使用: 1# Header 不建议： 1# Header # 解释: 容易维护。 不要 在#前加入空格. 建议使用: 1# Header 不建议： 1.# Header 不要 跳跃使用标题等级. 建议使用: 123# Header 1## Header 2 不建议： 123# Header 1### Header 3 在标题上下用空行隔开，除非标题在文档开头。 建议使用: 1234567Before.# Header 1## Header 2After. 不建议： 12345Before.# Header 1## Header 2After. 避免 在相同 Markdown 文件中使用相同的标题. 解释: 许多的 Markdown 解释器会依据标题的内容生成标题的IDs。 建议使用: 1234567# Dogs## Anatomy of the dog# Cats## Anatomy of the cat 不建议： 1234567# Dogs## Anatomy# Cats## Anatomy 顶级标题 如果你想要 HTML 直接输出，这样唯一的h1标记就是输出的第一件事，并且会成为文档的标题。这就是HTML的顶级标题。 h1标题的产生受到使用的 Markdown 引擎的直接影响： 一些引擎会从元数据（metadata）中产生标题，比如 Jekyll 就是从 front-matter 中产生标题。 将顶级标题保存为元数据（metadata）可以更加方便的在其他地方使用， 比如，在全局索引中，但也有缺点，比如降低了可读性和移植性。 如果目的不是生成顶级标题， include it in your markdown file. E.g., GitHub. 索引文件中的顶级标题比如README.md或者index.md应该作为他们父目录的标题。 顶级标题的缺点： 占用了一级标题。这就意味只剩下5个层级标题可以使用。 并且这样每一个新的标题就会多使用一个 #符号,这样看起来不好。 重复了文件名, 通常已经可以直接从 URL 中读到。 在大多数的情况下，文件名可以直接转换成顶级标题， 比如: 从 some-filename.md 到 Some filename. 顶级标题的优点: 比URL更加易读，尤其是对非技术出身用户。 标题大小写 标题开头使用大写字母，除非标题内容总是以小写出现, 例如，计算机代码。 建议使用: 1# Header 建议使用, 代码通常以小写开始： 1# int main 不建议： 1# header 其他字母按照句子中原始大小写。 建议使用: 1# The header of the example 不建议： 1# The Header of the Example 例外,首字大写 对 顶级标题 可选择性支持。 请异常谨慎地使用, in cases where typographical perfection is important, 比如：项目的 README . 解释: 为什么对所有标题首字大写? 如果要决定句子中每一个单词大小写会花费太多精力。 标题结尾 显示标题的内容，而不是用新标题和水平线紧随其后： 1234567# HeaderContent---Outside header. 标题长度 保证标题越短越好。 避免使用长句子，总结长句子作为标题，然后将长句子作为标题下的第一小节。 解释: 以后引用方便，尤其是自动生成 IDs 或者生成 TOC 。 建议使用: 123# Huge headerHuge header that talks about a complex subject. 不建议： 1# Huge header that talks about a complex subject 标题结尾标点 不要 在标题中以:结尾。 解释: 每一个标题都是接下来内容的简介，这也就正是冒号的作用。 不要 在标题中以.结尾。 解释: 每一个标题都包含一个简短的句子，也就不需要句号来分隔他们。 建议使用: 1# How to do make omelet 不建议： 1# How to do make omelet: 不建议： 1# How to do make omelet. 标题同义词 标题用作用户索引的关键词。 正由于这个原因，你可能希望在标题中用多个关键词。 要做到这一点，简单的创建一个同义词标题在主标题之前，并且标题下不包含内容。 比如： 12345# Purchase# BuyYou give money and get something in return. 每一个同层级的空标题都假定是同义的。如果层级不一样，那就是另外的含义： 123# Animals## Dog 引用 在符号 &gt; 后面接一个空格。 建议使用: 1&gt; a 不建议： 1&gt;a 不建议, 2个空格: 1&gt; a 在每一行使用 &gt; 符号，包括换行的句子。 建议使用: 12&gt; Long line&gt; that was wrapped. 不建议： 12&gt; Long linethat was wrapped. 不要 在单独的引用中使用空行。 建议使用: 123&gt; a&gt;&gt; b 不建议： 123&gt; a&gt; b 列表 标记 无序 使用连字符. 建议使用： 12- a- b 不建议： 1234* a* b+ a+ b 解释: 星号 * 可能和加粗和斜体符号产生混淆。 加号 + 不流行。 有序 尽量选用 1.来标记有序的列表, 除非你打算通过数字在相同 Markdown 文件或者外部文件中引用他们。 尽量使用无序的列表，除非有通过数字引用的需求。 最佳则是从来不通过序号来引用他们： 123- a- c- b 较好的方法, 仅仅使用 1.: 1231. a1. c1. b 较差的方法, 不要 通过序号来标注列表项的顺序: 1231. a2. c3. b 可接受的, 使用文本引用: 12345678910The ouput of the `ls` command is of the form: drwx------ 2 ciro ciro 4096 Jul 5 2013 dir0 drwx------ 4 ciro ciro 4096 Apr 27 08:00 dir1 1 2Where:1. permissions2. number of files directory contains 可接受，通过外部 markdown 文件引用: 1234Terms of use.1. I will not do anything illegal.2. I will not do anything that can harm the website. 解释: 如果你想要改变列表中的一个列表项，你不要 修改它下面的列表项。 Diffs 工具只会显示被修改的重要的内容。 如果序列有两位，也不需要额外注意，内容保持一致。 比如：下面不对齐： 129. a10. b 如果新列表项被加入，引用会破坏。尽量减少这种问题： 保证引用靠近列表，这样作者会更少可能的忘记去更新 当从外部引用时，总是引用到一个固定版本的 markdown 文件 列表项中的空格 列表项标记前总是留有一个空格。 建议使用: 12345- a b- c 不建议, 两个空格: 12345- a b- c 列表内容的缩进 列表中内容的缩进层级必须和第一个列表项一致： 建议(如果符合列表标记之后的空格): 1234567- item 1 Content 1- item 2 Content 2 不建议： 1234567- item 1 Content 1- item 2 Content 2 避免开始直接使用缩进的代码列表项，因为这样不容易实现。CommonMark states that一个单独的空格需要加入: 123- code a 列表中的空行 如果每一个列表项只有一行, 不要 在列表项之间增加空行，否则，在每一个列表项之间增加空行。 建议使用, single lines: 123- item 1- item 2- item 3 不建议, single lines: 12345- item 1- item 2- item 3 多行情况下，建议使用: 123456- item that is wrapped- item 2- item 3 多行情况下，不建议: 1234- item that is wrapped- item 2- item 3 建议使用, 多行: 123456789- item 1 - item 11 - item 12 - item 13- item 2- item 3 不建议, 多行: 12345678- item 1 - item 11 - item 12 - item 13- item 2- item 3 解释: 如果没有空行，很难分别多行的列表项开始和结束。 列表外的空行 列表外建议留有一空行。 建议使用: 123456Before.- list- listAfter. 不建议： 1234Before.- item- itemAfter. 列表项首字母大小写 每一个 list 使用原来在句子中的大小写. 建议使用: 12345I want to eat:- apples- bananas- grapes 因为它可以被如下替换： 123I want to eat applesI want to eat babanasI want to eat grapes 建议使用: 12345To ride a bike you have to:- get on top of the bike. This step is easy.- put your foot on the pedal.- push t the pedal. This is the most fun part. 因为它可以被如下替换： 123To ride a bike you have to get on top of the bike. This step is easy.To ride a bike you have to put your foot on the pedal.To ride a bike you have to push the pedal. This is the most fun part. 建议使用: 12345# How to ride a bike- Get on top of the bike.- Put your feet on the pedal.- Make the pedal turn. 因为它可以被如下替换： 12345# How to ride a bikeGet on top of the bike.Put your feet on the pedal.Push the the pedal. 列表项结尾标点 列表项结尾标点，除非: 包含多个句子或者短语 以大写字母开头 否则, 如果以句号结尾的话，省略标点. 建议使用: 123- apple- banana- orange 不建议使用: 123- apple.- banana.- orange. 建议使用: 123- go to the market- then buy some fruit- finally eat the fruit 建议使用, 不以句号结尾，而是以其他标点结尾： 123- go to the marked- then buy fruit?- of course! 不建议, 多个句子时末尾不加标点: 123- go to the market- then buy some fruit. Bad for wallet- finally eat the fruit. Good for tummy 建议使用: 123- go to the market- then buy some fruit. Bad for wallet.- finally eat the fruit. Good for tummy. 注意：没有任何理由阻止，一个列表项以句号结尾，另一个列表项没有。 不建议, 多段落: 123456789- go to the market- then buy some fruit Bad for wallet- finally eat the fruit Good for tummy 建议使用: 123456789- go to the market- then buy some fruit. Bad for wallet.- finally eat the fruit. Good for tummy. 不建议, 如果以大写字母开头，添加标点: 123- Go to the market- Then buy some fruit- Finally eat the fruit 建议使用: 123- Go to the market.- Then buy some fruit.- Finally eat the fruit. 定义列表 避免 使用定义列表扩展，因为他并没有被多数实现，也没有出现在 CommonMark. 相反, 使用: 格式化列表: 用加粗，链接，或者代码，格式化需要定义的内容 将内容和定义使用冒号和空格分割 :. 不要 对齐定义，这样难以维护，并且不会显示在 HTML 输出 建议使用: 12- **apple**: red fruit- **dog**: noisy animal 建议使用: 1234567- **apple**: red fruit. Very tasty.- **dog**: noisy animal. Not tasty. 建议使用: 12- [apple](http://apple.com): red fruit- [dot](http://dog.com): red fruit 建议使用: 12- `-f`: force- `-r`: recursive 不建议, 没有冒号: 12- **apple** red fruit- **dog** noisy animal 不建议, 在术语和冒号之间有空格: 12- **apple** : red fruit- **dog** : noisy animal 不建议, 定义对齐: 12- **apple**: red fruit- **dog**: noisy animal headers. 建议使用: 1234567# AppleRed fruit# DogNoisy animal 代码区域 可选 code:fenced 仅仅使用 fenced code blocks. 和缩进代码区块比较： 不足: 不是标准 markdown 语法, 因此缺少移植性，但是加入到CommonMark. 优点: 实现方式多, 包括 GitHub’s, 并且允许指定代码的语言。 不要 缩进 fenced code blocks. 总是指定代码的语言。 建议使用: 1a = 1 不建议： 1a = 1 可选 code:indented 仅仅使用缩进代码区域。 代码区域缩进4个空格。 代码区块必须以一空行隔开。 尽量在代码块之前使用冒号结束短语:。 建议使用: 123use this code to blow up your PC: sudo rm -rf / 不建议, 没有冒号 123use this code to blow up your PC sudo rm -rf / 水平横线 不要 使用水平线除非表明End of a header. 解释: 标题比区块更好，因为标题就是区块的开始，并且说明了区块的内容。 水平线没有可接受的语义。 这份风格指南给了语义。 使用 3 个无空格连字符: 1--- 表格 扩展. 用一空行包围表格。 不要 缩进表格。 用 |包裹表格的每一行。 竖直对齐所有表格边框。 将标题和内容用连字符分割，用对齐的 |。 | 周围必须要有一个空格，除非是外部的 |。 列的宽度通过列中最长的单元格确定。 建议表格: 12345678Before.| h | Long header ||------|-------------|| abc | def || abc2 | def2 |After. 解释: 不对齐的表格很容易书写，但是对齐的表格更加易读，并且人们读代码比编辑要更多。 开始的 | 更加容易看出表格的开始和结束。结尾的|让人看起来更加舒服，因为对称。 这些工具让表格对齐更加容易。比如，Vim 有 Tabular plugin插件，这个插件让我们可以使用 :Tabular /|来使整个表格对齐。 为什么在连字符分割行 | 没有空格包围, 比如: |---|而不是 | - |? 没有空格看起来更好，在GitHub可行， 缺点: 编辑器中自动对齐实现困难，因为对于分割行需要特殊的规则。 分离相连的列表 分离连续: 列表 缩进的代码块 引用 列表之后跟随额外的代码块 使用一个空白的 HTML 注释 &lt;!-- --&gt;. 1234567- list 1- list 1&lt;!-- --&gt;- list 2- list 2 1234567 code 1 code 1&lt;!-- --&gt; code 2 code 2 1234567&gt; blockquote 1&gt; blockquote 1&lt;!-- --&gt;&gt; blockquote 2&gt; blockquote 2 1234567- list- list&lt;!-- --&gt; code outside list code outside list Span元素 不要 使用内部空格。 建议使用: 1234**bold**`code`[link](http://a.com)[text][name] 不建议： 1234** bold **` code `[ link ]( http://a.com )[text] [name] 对于空格至关重要的行内代码： 在写作过程中解释空格存在的必要性 如果可能在空格之后加入其他内容 建议使用: 使用连字符并跟随一个空格来表示无序列表。 解释: 大多数的浏览器不会生成包围的空格，或者复制的时候不会将他们添加到粘贴板。 链接 参考样式链接 链接: 使用结尾的[]隐式链接： 建议使用: 1[a][] 不建议： 1[a] 解释: 省略[]大多数主要的实现都可以使用，但是这种方式并没有在文档中有实现，原始 Markdown 也没有提到。 定义: 必须写到文件末 必须以ID字符顺序排列 不要 使用尖括号包裹URL align URLs and link names as in a table 链接 IDs 仅仅使用小写字母. 解释: 因为 IDs 区分大小写, 只用小写容易书写，并且可读性比大小写混合单词大很多。 建议使用: 12[id2] http://long-url.com[long id] http://a.com &quot;name 1&quot; 不建议, 没有安装 id 排序: 12[b] http://a.com[a] http://b.com 不建议, 没有对齐: 12[id] http://id.com[long id] http://long-id.com 单引号或双引号标题 使用双引号，不要 使用单引号。 解释: 单引号并不是在所有的实现中都有效，但是双引号可以。 强调 加粗 使用双星号格式: **bold**. 解释: 比双下划线格式__bold__更加常见和可读性更高. 斜体 使用单星号格式: *italic*. 解释: 比下划线格式更加常见，易读性更高 与加粗格式一致, 同样使用星号标记 大写强调 不要 使用大写来强调: 使用强调语法例如 加粗或者斜体 。 解释: CSS 有text-transform:uppercase属性,如果你愿意的话，可以轻松在全网站实现相同的效果。 强调与标题 不要 使用强调元素(加粗或者斜体) 来介绍多行区块: 使用标题代替. 解释: 这个就是确切的标题的语义, 使用强调的并不是必须的。作为结果，许多实现，给标题增加有用的功能，并没有给强调元素，比如自动 id来更加容易的引用标题。 建议使用: 1234567891011# How to make omeletsBreak an egg....# How to bake breadOpen the flour sack.... 不建议： 1234567891011**How to make omelets:**Break an egg....**How to bake bread:**Open the flour sack.... 自动链接 使用尖括号自动链接 不要 使用不带尖括号的自动链接。 建议使用: 1&lt;http://a.com&gt; 不建议： 1http://a.com 解释: 这个扩展中,&lt;&gt;容易从键盘敲出，也同样容易读。 如果你不想文字链接自动链接，将他们以代码区块方式包裹，例如： 1`http://not-a-link.com` 解释: 许多工具自动将 http 开头的字串解释成链接。 内容的自动链接 所有自动链接必须以字串http开始。 特别的, 不要 在相对链接时使用自动链接。如果遇到相对链接，使用括号的方式创建链接。 建议使用: 1[file.html](file.html) 不建议： 1&lt;file.html&gt; 建议使用: 1&lt;https://github.com&gt; 不建议： 1&lt;github.com&gt; 解释: 将自动链接从HTML tags区分开很困难. 如果你想要一个相对的链接指向一个 script 的文件？ 电子邮件自动链接 不要 使用电子邮件自动链接 &lt;address@example.com&gt;. 使用纯HTML . 解释: 标准 markdown 设计规范这样描述: “performs a bit of randomized decimal and hex entity-encoding to help obscure your address from address-harvesting spambots”. 因此, 输出是随机的，丑陋的, 并且像规范中提到的: but an address published in this way will probably eventually start receiving spam License Markdown 风格指南 is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. Based on a work at http://www.cirosantilli.com/markdown-style-guide License Adapted from Markdown Style Guide by Ciro Santilli is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.]]></content>
      <categories>
        <category>Blog</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F2017%2F10-31-test%2F</url>
    <content type="text"><![CDATA[test ![](./image/background.jpg)]]></content>
      <categories>
        <category>test</category>
        <category>Music</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派-raspbian软件源]]></title>
    <url>%2F2017%2F10-06-%E6%A0%91%E8%8E%93%E6%B4%BE-raspbian%E8%BD%AF%E4%BB%B6%E6%BA%90%2F</url>
    <content type="text"><![CDATA[2017-10-06初成文 本文基本涵盖树莓派Raspbian主流国内软件源（stretch及jessie）及少量国外知名软件源。 目前最新的系统Raspbian（2017-08-16及以后的系统）已经基于Debian 9 Stretch，请选择正确的软件源。 更换源后，需要更新本地软件索引： 1sudo apt-get update 一键换源 直接执行以下两步，即可替换将官方默认软件源替换为 中科大镜像源 12sudo sed -i 's#://mirrordirector.raspbian.org#s://mirrors.ustc.edu.cn/raspbian#g' /etc/apt/sources.list sudo sed -i 's#://archive.raspberrypi.org/debian#s://mirrors.ustc.edu.cn/archive.raspberrypi.org#g' /etc/apt/sources.list.d/raspi.list 或换为清华镜像源 12sudo sed -i 's#://mirrordirector.raspbian.org#s://mirrors.tuna.tsinghua.edu.cn/raspbian#g' /etc/apt/sources.listsudo sed -i 's#://archive.raspberrypi.org/debian#s://mirrors.tuna.tsinghua.edu.cn/raspberrypi#g' /etc/apt/sources.list.d/raspi.list 树莓派基金会提供的源 /etc/apt/sources.list.d/raspi.list里的软件源是树莓派基金会单独（非Raspbian开发者）提供/维护的软件源，主要包括raspi-config、minecraftpi、树莓派桌面环境、内核固件驱动等少量软件。 这个软件源相关资料比较少，国内目前只有清华（201709开始提供）和中科大有提供 Stretch（三选其一即可） 123456中科大deb https://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui清华deb https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui默认官方源deb http://archive.raspberrypi.org/debian/ stretch main ui Jessie（三选其一即可） 123456中科大deb https://mirrors.ustc.edu.cn/archive.raspberrypi.org/ jessie main ui清华deb https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ jessie main ui默认官方源deb http://archive.raspberrypi.org/debian/ jessie main ui Raspbian源 raspbian这个源是由独立开发者维护的，与树莓派基金会并无直接联系。国内源比较多，选择一个与自己延迟最小或连接速度最好或物理距离最短的即可。 无需担心各个软件源内容上会有不同，基本上各个站点每天都会同步一次，绝大部分情况下某软件安装不了与用了哪个站点提供的源无关。通常位于/etc/apt/sources.list Stretch（选择其中一个即可，注意大小写及目录） 123456789101112131415161718192021222324252627282930中科大deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi 清华deb https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi大连东软deb http://mirrors.neusoft.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi重庆大学deb http://mirrors.cqu.edu.cn/Raspbian/raspbian/ stretch main contrib non-free rpi浙江大学deb http://mirrors.zju.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi阿里云deb http://mirrors.aliyun.com/raspbian/raspbian/ stretch main contrib non-free rpi 搜狐deb http://mirrors.sohu.com/raspbian/raspbian/ stretch main contrib non-free rpi 元智大学（中国台湾）deb http://ftp.cse.yzu.edu.tw/Linux/raspbian/raspbian/ stretch main contrib non-free rpi 北陆先端科学技术大学院大学（日本知名镜像站，日常出口带宽2g）deb http://ftp.jaist.ac.jp/raspbian/ stretch main contrib non-free rpi牛津大学deb http://mirror.ox.ac.uk/sites/archive.raspbian.org/archive/raspbian/ stretch main contrib non-free rpi美国Berkely大学deb http://mirrors.ocf.berkeley.edu/raspbian/raspbian/ stretch main contrib non-free rpi美国俄克拉荷马大学deb http://reflection.oss.ou.edu/raspbian/raspbian/ stretch main contrib non-free rpi南非知名软件源deb http://mirror.liquidtelecom.com/raspbian/raspbian/ stretch main contrib non-free rpi 默认源（带重定向by mirrorbrain）deb http://mirrordirector.raspbian.org/raspbian/ stretch main contrib non-free rpi官方源deb https://archive.raspbian.org/raspbian/ stretch main contrib non-free rpi Jessie（选择其中一个即可，注意大小写及目录） 123456789101112131415161718192021222324252627282930中科大deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ jessie main contrib non-free rpi 清华deb https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ jessie main contrib non-free rpi大连东软deb http://mirrors.neusoft.edu.cn/raspbian/raspbian/ jessie main contrib non-free rpi重庆大学deb http://mirrors.cqu.edu.cn/Raspbian/raspbian/ jessie main contrib non-free rpi浙江大学deb http://mirrors.zju.edu.cn/raspbian/raspbian/ jessie main contrib non-free rpi阿里云deb http://mirrors.aliyun.com/raspbian/raspbian/ jessie main contrib non-free rpi 搜狐deb http://mirrors.sohu.com/raspbian/raspbian/ jessie main contrib non-free rpi 元智大学（中国台湾）deb http://ftp.cse.yzu.edu.tw/Linux/raspbian/raspbian/ jessie main contrib non-free rpi 北陆先端科学技术大学院大学（日本知名镜像站，日常出口带宽2g）deb http://ftp.jaist.ac.jp/raspbian/ jessie main contrib non-free rpi 牛津大学deb http://mirror.ox.ac.uk/sites/archive.raspbian.org/archive/raspbian/ jessie main contrib non-free rpi 美国Berkely大学deb http://mirrors.ocf.berkeley.edu/raspbian/raspbian/ jessie main contrib non-free rpi美国俄克拉荷马大学deb http://reflection.oss.ou.edu/raspbian/raspbian/ jessie main contrib non-free rpi南非知名软件源deb http://mirror.liquidtelecom.com/raspbian/raspbian/ jessie main contrib non-free rpi 默认源（带重定向by mirrorbrain）deb http://mirrordirector.raspbian.org/raspbian/ jessie main contrib non-free rpi官方源deb https://archive.raspbian.org/raspbian/ jessie main contrib non-free rpi 参考文章： raspbian镜像列表]]></content>
      <categories>
        <category>Linux</category>
        <category>Raspbian</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Raspbian</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派3b-一百多款好玩的小游戏]]></title>
    <url>%2F2017%2F10-06-%E6%A0%91%E8%8E%93%E6%B4%BE3b-%E4%B8%80%E7%99%BE%E5%A4%9A%E6%AC%BE%E5%A5%BD%E7%8E%A9%E7%9A%84%E5%B0%8F%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[2017-10-06 初成文。更新中… 前言 游戏主要收集于国外论坛，去掉过时安装包，翻译游戏介绍等，游戏环境raspbian stretch(2017-09-07)。可能其他linux主机也有类似软件包 因截图浪费空间及因时间关系，仅截图几个游戏。 部分游戏需要开启GL Driver（raspi-config中advanced options里打开） cuyo——非常Impressive的俄罗斯方块，每关一种风格，很多关。强烈推荐 frozen-bubble——泡泡龙，3D球消去类游戏 icebreaker——切割小游戏，曾计划放入Debian的安装ISO中，在安装时的基本系统中消磨等待时间 pingus——解迷类的游戏。控制一群企鹅用各种道具走出出口。游戏的方式与旅鼠总动员相同，在每一关中，只要让一定数量的企鹅们走出出口，即算过关。企鹅们也同旅鼠般，只会往前冲，就算是有悬崖也会往下跳，要拯救他们，只好指定一些企鹅们、造造桥、挖挖地道、或是当当墙壁，阻止其它企鹅们通过，让企鹅们顺利走到出口。 主要游戏 以下游戏如无特别说明，均可以通过apt-get安装(粗略介绍)，部分游戏有问题或不会玩或错误描述，如知道的请留言： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118neverball - 3D动作滚球类游戏，改变水平面平衡球引导至目的地。基于OpenGL，采用C语言开发的开源滚球类游戏。neverputt - 3D高尔夫球游戏。特点同上。zaz - 消除类游戏，通过吞吐各种不同颜色的小球来消除，开创了消除类的新玩法，祖玛类型游戏的开山之作openttd - 以运输为核心的模拟经营类游戏simutrans - 模拟交通，只能在低分辨率下下完micropolis - 小型城市管理类游戏widelands - 类似于工人物语的战略游戏freecraft - 类似于魔兽争霸2的即时战略游戏funnyboat - 射击类游戏，在船上借助波浪和大炮来击退或躲避敌人whichwayisup - 传统和具有挑战性的2D平台游戏，帮助一名名叫盖伊的神秘大耳白领在危险的迷宫里找到他的钥匙。freeciv - 多用户、回合制的策略游戏，类似于“文明帝国”ketm - 飞行射击游戏(kill everything that moves)blobwars - 一个2d射击手(黄色的一团)任务是渗透到敌方基地，并与外星人战斗 [警告! 包含暴力等不宜内容] flight-of-the-amazon-queen - 亚马逊女王的航班,故事设定是Joe King前往亚马逊丛林腹地营救被绑架的公主[also installs ScummVM]beneath-a-steel-sky - 与flight-of-the-amazon-queen(上)类似, 不过设定在未来的黯淡的后启示录以及一条不同的故事线 [游戏引擎:ScummVM]abuse - 闪退了...看介绍故事设定是逃离有几个被感染变成异形的囚犯地下监狱的射击手btanks - 坦克大战游戏battle tanksminecraft-pi - 我的世界（pi版）【http://pi.minecraft.net】xjump - 从一个平台跳到另一个平台，避免掉下去。要跟上地板下降的速度。blockout2 - 3D堆叠游戏，类似于俄罗斯方块pingus - 旅鼠解谜类游戏，上面见图。supertux - 企鹅版超级马里奥quake3 雷神之锤III竞技场，我没玩过【https://www.raspberrypi.org/forums/viewtopic.php?f=78&amp;t=18853】 警告! 包含暴力内容angrydd - 类似于俄罗斯方块，多人游戏(angry drunken dwarves)nethack-common - 地牢探索者(dungeon crawler game) 安装之后发现没有GUI，不会玩，大概安装错了...monsterz - 消除类游戏，与消消乐类似prboom-plus - 第一人称射击游戏，类似于CS？sopwith - 复古2d空战游戏 ，像素游戏ffrenzy - (feeding frenzy)通过跳跃获取水果，多人游戏。freedink - 角色扮演游戏，猪农被迫离开村庄寻找他的阿姨，路上完成一系列任务lincity - 3d版城市管理经营策略类游戏，然而这类游戏我不会玩triplane - 飞行射击游戏，不过分辨率太低了看不清哪个是start game...gnurobbo - 冒险小游戏【http://gnurobbo.sourceforge.net】3dchess - 3d国际象棋，xyz轴上玩？不懂玩法4digits - 猜数字（4位）游戏，A表示位置相同数字相同，B表示数字对了位置不对acm - 3d模拟飞行游戏，不会玩。airstrike - 2d空中激战游戏allegro-demo - 2d太空射击游戏atanks - 与xscorch一样，多人游戏，调整炮塔角度和力度瞄准敌人，但图形渲染更好看些battleball - 安装完后找不到程序...用坦克或直升机踢球？desmume - nds模拟器 (only runs in x11)freesweep - 针对终端的扫雷，可配置表行列、炸弹比例、颜色xgalaga - 飞行射击类游戏，类似于红白机的小蜜蜂。我玩的时候很卡gnushogi - 额，同xshogi，日本象棋hexxagon - 疯狂跳棋。锻炼脑力的游戏，不会玩。mancala - 非洲棋overgod - 太空射击飞行射击类游戏，我打不开这游戏pipenightdreams - 接水管游戏xye - 卡死了打不开，玩不了。qonk - 太空游戏，没看游戏规则不会玩。rafkill - 飞行射击类游戏。需要在run里打开。realtimebattle - 不会玩【游戏介绍http://realtimebattle.sourceforge.net】snake4 - 贪吃蛇(吃水果)spacearyarya - 3d太空射击游戏。run里打开spacezero - 太空探索游戏。spout - 像素游戏，飞行射击类游戏，还算好玩stax - 消除类游戏tagua - 国际象棋tetzle - 不知是什么，好像只是个壳，还需要游戏image？tint - 介绍是控制台版俄罗斯方块，然而我打不开这游戏wing - 2d飞行射击游戏，不知哪个控制键wordplay - 文字拼写游戏。必须从控制台打开，然而我也打不开这游戏wmpuzzle - 拼图游戏，有4x4和64x64xabacus - 好像就是个珠算盘吧xball - 不懂是什么，好像是一款球类模拟器。xbill - 类似于拍蚊子游戏xblast-tnt - 炸弹人游戏，不懂怎么控制xboing - 用鼠标控制，击落目标，同时不让球掉下。xbomb - 扫雷修改版（三角形、正方形、六角形）xbubble - 泡泡龙游戏，不懂怎么控制发射。xchain - 双人游戏，策略游戏。我打不开这游戏xdemineur - 最接近windows的扫雷，看起来几乎是一样的xgammon - 西洋双陆琪，规则百度下吧，我不会玩。。。#xinv3d - (xinvaders 3d) 类似于红白机的小蜜蜂，3d版xjig - jigsaw拼图修复版，鼠标中键（或ctrl+左右键）反转。拼图来自/usr/share/games/xjig目录，支持GIF/JPEG/PPM图片格式xmahjongg - 麻将版连连看xmpuzzles - 拼图类游戏包合集（ - Rotational 3D Puzzles: xmrubik（魔方）, xmpyraminx, xmoct, xmskewb, xmdino（异形魔方）, xmmball - Sliding Block Puzzles: xmcubes, xmtriangles, xmhexagons, xmpanex - Combination: xmbarrel, xmmlink）xmille - 然而我不会玩...xmountains - 貌似不是一个游戏，演示通过一定算法描绘3d地形[https://spbooth.github.io/xmountains]xonix - 类似于JezzBall或icebreaker策略游戏类，通过画标记线来缩小小球的活动范围，但是不能触碰到小球，需清除活动面积的75%xscavenger - 类似于淘金者游戏，推荐xscorch - 坦克游戏，调整炮塔角度和力度瞄准敌人xshogi - 日本象棋，类似于宝应象棋吧[中国象棋的先祖]，我没研究过玩法xskat - 变种纸牌游戏，支持[斯卡特](参考https://de.wikipedia.org/wiki/Ramsch_(Kartenspiel))规则，我不会玩...xsoldier- 2d飞行射击游戏，shift键发射xsol - (x solitaire) 纸牌游戏xtron - 双人游戏，贪吃蛇xvier - 类似于5子棋，但只是4子，玩法略有不同。xwelltris - 3d变态版俄罗斯方块，难度极高yahtzeesharp - 快艇骰子，风靡全世界超过40年的经典骰子游戏yics - 看介绍是连接到雅虎服务器玩国际象棋，然而打不开zatacka - Achtung die Kurve的dos游戏克隆版，不懂怎么开始pysolfc - (pysol fan club) 极度推荐，内置超过1000款纸牌游戏，带玩法介绍。【游戏列表http://pysolfc.sourceforge.net/all_games.html】被几家新闻界认定为“巨大的纸牌游戏集合，远远超出通常的组合“十大Linux游戏假期”下面这些游戏有空再更新了...#sonic robo blast 2 (thanks kimbrasil) - 3d sonic game (other) (see http://www.raspberrypi.org/forums/viewt ... 00#p567447)#pifox - a bare-metal 3d dodgem-style clone of an old snes game (starfox) - *other* (http://www.raspberrypi.org/pifox-bare-m ... -star-fox/)#darkplaces quake - a moded quake engine for running several standalone games &amp; quake mods - *other* (http://www.raspberrypi.org/forums/viewt ... 78&amp;t=72301)#doukutsu monogatari (aka cave story) - a retro-styled 2d shooter, with a creative storyline and fun gameplay (will reboot, as it runs outside of x) - *pistore*#opentyrian - a port of the classic top-down aerial shooter - *other* (http://dosonthepi.blogspot.co.uk/2015/0 ... yrian.html) (thanks snowballearth)overlord - a remake of a classic game for riscos *other* (viewtopic.php?f=78&amp;t=109142) #pax brittanica - a one-button rts port to the pi using java and libgdx - *other * (viewtopic.php?f=78&amp;t=118349)#lpairs - a memory game - *other* (note: requires compiling: http://lgames.sourceforge.net/index.php?&amp;project=lpairs)the abbey of crime extensum (la abadía del crimen extensum) - an isometric java adventure game - *other* (http://www.abadiadelcrimenextensum.com/)vorton - a remake of the classic highway encounter - *other* (note: this build was compiled for the raspberry pi 2 upwards: https://app.box.com/s/a7ja91zvf83i3xvrotnpoqlz9o3e9702)mayhem - the classic amiga game, ported to the pi - *other* (http://www.stuffaboutcode.com/2016/04/m ... ed-to.html)hurrican - a pi port of a side-scrolling shooter - *other* (http://misapuntesde.com/post.php?id=242)a bunch of cool python puzzles - *other* (http://pzl.org.uk/downloads.html#raspberry_pi)arcanum, disciples ii and fallout - *other* (https://eltechs.com/gaming-beyond-retropie/)minetest - an open-source minecraft implementation, extendable in lua - *other* (http://www.minetest.net/)aeonalpha - a 3d multiplayer space shooter - *other* (viewtopic.php?f=78&amp;t=151544)sqrxz series - a retro-style side-scrolling jump-and-stomp game(http://www.sqrxz.de/)fruit&apos;y - a game inspired by the classic gem&apos;x(http://www.retroguru.com/fruity/)xump - a multi-platform puzzler(http://www.retroguru.com/xump/) 其他游戏 第三方游戏等 1234567https://www.yoyogames.com/pi 【YoYo games目前包括以下三款游戏】 *MalditaCastilla *SuperCrateBox *TheyNeedToBeFedhttps://www.raspberrypi.org/forums/viewtopic.php?f=78&amp;t=51794&amp;p=908656#p902515【Webfoot Games】https://eltechs.com/product/exagear-desktop/https://www.raspberrypi.org/forums/viewtopic.php?p=675330#p675330 模拟器 1234567891011121314151617181920stella - Atari VCS/2600模拟器（可能不支持jessie版系统）mednafen - 多模拟器支持，支持以下系统 * Atari Lynx * GameBoy * GameBoy Color * GameBoy Advance * NES * SNES * Virtual Boy * PC Engine (TurboGrafx 16) * PC-FX * SuperGrafx * NeoGeo Pocket, NeoGeo Pocket Color * WonderSwan * Sega Genesis / Mega Drive * Sega Saturn * Sony PlayStationfuse-emulator-common - ZX Spectrum模拟器Eltechs ExaGear Desktop - 参考【https://eltechs.com/product/exagear-desktop/】rpix86 - 【参考https://www.raspberrypi.org/forums/viewtopic.php?f=78&amp;t=32934 或 http://rpix86.patrickaalto.com/rdown.html】 主要参考文章: https://wiki.ubuntu.com.cn/Qref/Apps https://www.raspberrypi.org/forums/viewtopic.php?f=78&amp;t=51794]]></content>
      <categories>
        <category>Linux</category>
        <category>Raspbian</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Raspbian</tag>
        <tag>Games</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派3B-修改网卡命名规则]]></title>
    <url>%2F2017%2F10-05-%E6%A0%91%E8%8E%93%E6%B4%BE3B-%E4%BF%AE%E6%94%B9%E7%BD%91%E5%8D%A1%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%2F</url>
    <content type="text"><![CDATA[2017-10-05 初成文 查看网卡名称 ifconfig 或netstat -i查看网卡名称 可能大家遇到过网卡命名不是我们常见的eth0、eth1，而是enx+[mac地址]（比如enxb827eb112233，而ubuntu mate采用的是PCI设备命名比如epn0s31f6） 这个不是系统bug，而是较新的命名规则一致的网络设备命名或CONSISTENT NETWORK DEVICE NAMING用于取代基于ethX的旧命名规范，老的命名方式有些问题，因为网卡（NICs）的命名是基于内核启动时发现设备的顺序而定的。添加新接口可能会导致原来的接口名称改变。 更换为原始网卡命名方法，在/boot/cmdline.txt里添加net.ifnames=0 update： 最新的系统raspbian(2017-09-07)已经默认采用“老式”命名规则即有线网卡eth0，同时最新版raspi-config(2017-09-26之后版本)在Advanced Options里可以切换网卡命名规则。 enable Predictable Network Interface Names则以网卡mac地址命名 参考文章： https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/]]></content>
      <categories>
        <category>Linux</category>
        <category>Raspberry</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Interface</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派3B-完全u盘启动系统]]></title>
    <url>%2F2017%2F10-05-%E6%A0%91%E8%8E%93%E6%B4%BE3B-%E5%AE%8C%E5%85%A8u%E7%9B%98%E5%90%AF%E5%8A%A8%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[使用该方法，以后安装系统可以不再需要SD卡。当然存在SD卡时，启动时还是优先启动SD卡的系统。 但是需要借助raspbian（2017-04-10及之后的版本）来打开该功能。 操作步骤如下： 在/boot/config.txt里添加一行program_usb_boot_mode=1 1echo program_usb_boot_mode=1 | sudo tee -a /boot/config.txt //该命令在终端执行，会在config.txt末尾添加program_usb_boot_mode=1 重启，此时已经打开usb boot模式。 检查方法，在终端执行： 1vcgencmd otp_dump | grep 17: 并显示信息17:3020000a 表示成功打开 跟sd卡一样，对u盘写入系统，树莓派插上u盘启动即可（不需sd卡） 注意事项： USB Boot Mode模式实质是向SOC里的OTP（One Time Programmable）设置修复位使之支持，该操作是不可逆的； 该模式仅支持树莓派3B机型； 因为仍然优先检测SD卡是否存在，所以usb boot会有5~10秒延迟来启动usb设备；可以插上一张空白sd卡来减低延迟。 因为usb和网卡共用smsc lan9514芯片，所以该模式同时打开network boot模式，即允许通过网络安装启动系统； 不是所有u盘都兼容，因为u盘主控或芯片太多太杂或使用特殊主控，比如Kingston Data Traveller 100 G3 32G无法正常工作。官方测试工作良好的u盘： 1234Sandisk Cruzer Fit 16GBSandisk Cruzer Blade 16GbSamsung 32GB USB 3.0 driveMeCo 16GB USB 3.0 参考文章： 1、https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/msd.md 2、https://www.raspberrypi.org/blog/pi-3-booting-part-i-usb-mass-storage-boot/]]></content>
      <categories>
        <category>Linux</category>
        <category>Raspberry</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Raspberry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NOOBS自定义多系统启动]]></title>
    <url>%2F2017%2F09-23-NOOBS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%9A%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[2017-09-23 初成文 准备工作 需要linux环境(虚拟机也可) 标准的适用树莓派的IMG镜像文件 基本的linux知识＋强大的搜索资料解决问题的能力 介绍 目前树莓派多系统启动主要是noobs和berryboot 两个各有优缺点: berryboot可以直接在berryboot界面备份系统或数据，缺点也不少，比如分区是共享的，img是只读的，官方系统支持更新慢等。 noobs是官方工具，各个系统之间是独立的，一个系统挂了另一个仍然能够正常启动，资料相对较多。 另外还有一个PINN基于noobs的增强版，添加一些功能，比如无人值守自动安装、wifi自动配置等，可按此文自定义安装第三方系统。 本文示例使用noobs从u盘安装kali(VM下制作)并拓展至最大分区。 这里先说一下noobs的相关内容，从v1.5版本开始安装后会自动建立一个fat32格式的RECOVERY分区（主分区），用来存放noobs启动文件和一个ext4格式的SETTINGS分区（逻辑分区）用来存放noobs相关信息如已安装系统的boot/root分区位置。余下拓展分区用来安装系统。 必要文件 noobs里的系统至少需要4个文件 12345678os.json //系统描述partitions.json //分区描述boot.tar //boot分区文件root.tar //root分区文件上面四个文件是必须的，缺一不可，其它则是不必须的：slides或slides_vga //文件夹内放说明性图片,安装时在主界面以幻灯片播放,如官方提供则可由marketing.tar解压得https://downloads.raspberrypi.org/Logo.png //Logo名字须与文件夹名字相同，大小40x40为宜partition_setup.sh //分区脚本，在系统安装完成后立即执行，如无则需要在cmdline.txt设定root分区位置 os.json示例 12345678910111213&#123; "description": "Kali Linux for RasPi added to NOOBS Bootloader", "kernel": "4.4", "name": "Kali", "release_date": "2017-05-25", "supported_hex_revisions": "1040,1041,2082", "supported_models": [ "Pi 2", "Pi 3" ], "url": "https://www.kali.org/", "version": "2017.1"&#125; 其中: name必须与文件夹名字相同，最好不要留空格 description为系统简介，出现在选择界面 release_date如为官方系统，为避免从网络下载更新版本可改为更晚的日期 supported_hex_revisions:&quot;2,3,4,5,6,7,8,9,d,e,f,10,11,12,14,19,1040,1041,0092,0093,2082&quot;表示兼容所有pi，2082对应树莓派3b partitions.json示例 12345678910111213141516171819&#123; "partitions": [ &#123; "label": "boot", "filesystem_type": "FAT", "partition_size_nominal": 100, "want_maximised": false, "uncompressed_tarball_size": 51 &#125;, &#123; "label": "root", "filesystem_type": "ext4", "partition_size_nominal": 3867, "want_maximised": true, "mkfs_options": "-O ^huge_file", "uncompressed_tarball_size": 3133 &#125; ]&#125; 其中: label必须与两个tar名字一致; filesystem_type文件系统类型/boot为fat，/root为ext4; uncompressed_tarball_size:boot.tar/root.tar解压后的大小 partition_size_nominal:设定分区大小 want_maximised：一旦设定为true，noobs就会自动将可用空间分配到该分区，因而当设置为true时partition_size_nominal设置多大也无所谓了。 mkfs_options：mkfs命令，hugefile表示允许文件大于2TB 制作boot.tar和root.tar 制作过程： 从官网下载最新版的kali镜像。 vm虚拟机设置共享文件夹（或直接使用linux实体机） 挂载上面的文件系统后，切换到share目录下，比如我的是/mnt/hgfs/share（后文同样，需切换到自己实际的目录） 1234cd /mnt/hgfs/sharesudo mkdir /mnt/img1 //创建两个挂载点来挂载sudo mkdir /mnt/img2sudo kpartx -av kali-2017.01-rpi2.img //装载映像文件 输出IMG内部两个分区： add map loop0p1 (253:0): 0 125000 linear 7:0 1 add map loop0p2 (253:1): 0 14209047 linear 7:0 125001 创建boot.tar 12345mount -o loop,ro,noexec /dev/mapper/loop0p1 /mnt/img1cd /mnt/img1bsdtar --numeric-owner --format gnutar -cvpf /tmp/boot.tar .ls /tmp/boot.tar -l --block-size=1MBxz -9 -ev /tmp/boot.tar 创建root.tar并卸载刚才挂载的映像 12345mount -o loop,ro,noexec,noload /dev/mapper/loop0p2 /mnt/img2cd /mnt/img2bsdtar --numeric-owner --format gnutar --one-file-system -cpvf /tmp/root.tar .xz -9 -ev /tmp/root.tarsudo kpartx -dv kali-2017.01-rpi2.img 此时，已经生成boot.tar和root.tar在/tmp目录下，将其移出虚拟机与上面的两个json文件组成kali文件夹放在/os文件夹下即可。 为了最大化利用sd卡空间，建议只把noobs除了os文件夹外的文件放于sd卡根目录下，os文件夹放于u盘根目录下，这样noobs将自动调整recovery分区为最小，只占用大概63M左右而剩余空间几乎全部用来安装系统。 遇到的一个坑是默认启动boot和root分区是mmcblkp1和mmcblkp2，而实际应该是mmcblkp6和mmcblkp7。后来直接把Raspbian的partition_setup.sh借来用，跟上面4个文件一起放到/os/kali同一文件夹下可解决这个问题，logo可自制40x40像素，如下图： 水平有限，时间仓促，难免有误，欢迎指正。 主要参考文章： 1.Nitrus/noobs 2.raspberrypi/noobs 3.NOOBS安装自定义系统 4.QUAD BOOT – RASPBIAN ‘PIXEL’, RETROPIE, RASPLEX, KODI]]></content>
      <categories>
        <category>Linux</category>
        <category>Raspberry</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Raspberry</tag>
        <tag>Noobs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派3B-打开硬件加速OpenGL]]></title>
    <url>%2F2017%2F09-23-%E6%A0%91%E8%8E%93%E6%B4%BE3B-%E6%89%93%E5%BC%80%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9FOpenGL%2F</url>
    <content type="text"><![CDATA[2017-09-23 初成文 2017-10-05 添加图片 目前系统(2016-02之后的raspbian with desktop)已经内置OpenGL driver，但默认是关闭的而使用较慢的软件渲染。 注意：Lite版系统是不支持的，因为opengl离不开桌面。一般来说该选项仅支持pi2及以后的版本，当然也可以找一下Pi 1/0开启opengl的方法(https://www.raspberrypi.org/forums/viewtopic.php?f=66&amp;t=166495) 打开方法： 12sudo raspi-config//打开Advanced Options→GL Driver，选择第一GL (Full KMS) Desktop Drivers或第二选项GL (Fake KMS) Desktop Driver 或者直接在/boot/config.txt里添加一行dtoverlay=vc4-kms-v3d或dtoverlay=vc4-fkms-v3d，分别对应上面两项。 KMS是指Kernel Mode-Setting，理论上该模式会更有效率，因为是通过内核输出的，而Fake KMS则有更好的兼容性，比如打开Full KMS后使用realvnc远程会黑屏等。 需要注意的是，打开该选项可能会导致标准摄像头或者基于OpenGL ES（OpenGL的子集）的视频渲染软件失效（比如kodi），不支持DSI接口的官方显示屏。 测试是否已正确配置 在终端打开 12sudo aptitude install mesa-utilsglxgears 如果使用的是标准的软件渲染模式，可见三个齿轮运转大概30帧/s并伴有闪烁卡顿，颜色显示也不正常。如果使用的是opengl硬件加速模式，则有60帧/s，不会伴有闪烁，颜色也显示正常。 1sudo aptitude install neverball 这个游戏在软件渲染模式之下几乎是不能打开的，即使打开了也非非常卡顿。 其他opengl应用或游戏（建议GPU mem设置不低于256MB)： 12345678910They Need To Be FedSuper Crate BoxMaldita Castilla —— an atmospheric action arcade game Stellarium —— an Astronomy programNeverBall —— a puzzle gameNeverPutt —— mini Golf gameglTron —— Tron style Cycle gameOpenArea —— first person shooter gameSuper Tux Kart —— a Mario Kart style gameFrets on Fire —— a Guitar Hero style game 主要参考文章： OpenGL Drivers on Raspberry Pi B/B+/Zero THREE GREAT GAMEMAKER GAMES FOR RASPBERRY PI New experimental GL driver configuration]]></content>
      <categories>
        <category>Linux</category>
        <category>Raspbian</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Raspbian</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派-简单对比远程桌面的三种方式]]></title>
    <url>%2F2017%2F09-15-%E6%A0%91%E8%8E%93%E6%B4%BE-%E7%AE%80%E5%8D%95%E5%AF%B9%E6%AF%94%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[2017-09-23 update:VNC黑屏与OpenGL选项 测试环境：Raspbian Stretch（2017-09-07） xrdp 电脑上最方便的方式，直接使用win下的mstsc远程桌面即可，无需再安装第三方软件。 而树莓派上执行一条命令就可以使用了: 1sudo apt install xrdp 然后打开win上的mstsc，输入树莓派ip地址，连接后确认用户和密码。 VNC 优点是支持多平台，iOS、Mac、Linux、Android等都有客户端，远程玩我的世界 minecraft 不会黑屏。 树莓派Raspbian(201609之后的系统)均已经内置realvnc-vnc-server，直接打开使用就可以了，无需再安装tightvncserver等，而tightvncserver与realvnc-vnc-server也有冲突。同时也内置了vnc-viewer，即可以远程其他RealVNC设备。 注意点：打开Desktop OpenGL Full KMS后会远程黑屏，建议使用Fake KMS。 打开方法： 12sudo raspi-config选择Interfacing Option，选择P3 VNC，选择Yes &lt;Enable&gt; 电脑和手机上安装 VNC-Viewer ，输入树莓派ip地址，验证密码。 Teamviewer 这个优点是有更多的权限管理，传输文件方便，登陆teamviewer账号支持外网远程访问，直接显示HDMI输出的桌面，不像vnc打开的是分配的桌面号； 安装依赖: 1sudo aptitude install libc6 libdbus-1-3 libqt5gui5 libqt5widgets5 libqt5qml5 libqt5quick5 libqt5webkit5 libqt5x11extras5 qml-module-qtquick2 qml-module-qtquick-controls qml-module-qtquick-dialogs qml-module-qtquick-window2 qml-module-qtquick-layouts 安装teamviewer-host: 12wget https://download.teamviewer.com/download/linux/teamviewer-host_armhf.debsudo dpkg -i teamviewer-host_armhf.deb]]></content>
      <categories>
        <category>Linux</category>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Software</tag>
        <tag>VNC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派3B规格-GPIO引脚图-负载电流参考]]></title>
    <url>%2F2017%2F09-14-%E6%A0%91%E8%8E%93%E6%B4%BE3B%E8%A7%84%E6%A0%BC-GPIO%E5%BC%95%E8%84%9A%E5%9B%BE-%E8%B4%9F%E8%BD%BD%E7%94%B5%E6%B5%81%E5%8F%82%E8%80%83%2F</url>
    <content type="text"><![CDATA[树莓派3B规格等，用作备忘 1234567891011SOC: Broadcom BCM2837芯片CPU: 四核Cortex-A53@1.2GHz，ARMv8架构，32KB一级缓存 512KB二级缓存GPU: 双核VideoCore IV GPU@400MHz，3D core@300MHz，OpenGL ES 2.0，1080p 60fps h.264/MPEG-4 AVC工作温度范围: SOC-40~85°C，LAN9514(0~70°C)内存: 1GB LPDDR2（900 MHz）SMSC LAN9514: 4个USB2.0 和10/100M Ethernet共享BCM43438: WiFi（802.11 b/g/n 2.4GHz）和蓝牙4.1（BLE）,支持无线电GPIO: 40-pin视频接口: HDMI1.4接口: DSI显示屏接口（15-pin）、CSI 2 摄像头接口（15-pin）、3.5mm复合视频输出口、microSD接口供电: 支持5V 2.5A GPIO引脚图： 各个版本树莓派在启动、空载、播放视频、满载下电流大小对比： Pi1 (B+) Pi2 B Pi3 B (amps) Zero (amps) Boot Max 0.26 0.40 0.75 0.20 Avg 0.22 0.22 0.35 0.15 Idle Avg 0.20 0.22 0.30 0.10 Video playback (H.264) Max 0.30 0.36 0.55 0.23 Avg 0.22 0.28 0.33 0.16 Stress Max 0.35 0.82 1.34 0.35 Avg 0.32 0.75 0.85 0.23 测试环境：室温，系统Raspbian (26 Feb 2016)，连上HDMI、USB键盘和鼠标，Pi3 B连接上WiFi热点。 参考文章： Raspberry Pi FAQs]]></content>
      <categories>
        <category>Linux</category>
        <category>Raspberry</category>
        <category>Hardware</category>
      </categories>
      <tags>
        <tag>Raspberry</tag>
        <tag>Hardware</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派-重装所有已安装的软件]]></title>
    <url>%2F2017%2F09-04-%E6%A0%91%E8%8E%93%E6%B4%BE-%E9%87%8D%E8%A3%85%E6%89%80%E6%9C%89%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[其他基于Debian的系统均适用，需要全部从软件源重新下载所有安装包，耗时较长，实在没办法万不得已之备选方法。 1sudo apt-get --reinstall install `dpkg --get-selections | grep '[[:space:]]install' | cut -f1`]]></content>
      <categories>
        <category>Linux</category>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派提高shell逼格oh-my-zsh]]></title>
    <url>%2F2017%2F09-04-%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8F%90%E9%AB%98shell%E9%80%BC%E6%A0%BCoh-my-zsh%2F</url>
    <content type="text"><![CDATA[20170904 初成文，未完… 20171012 更新插件及alias方案 技术可以菜，但写代码的方式一定要帅！ 查看当前系统可用的shell 1cat /etc/shells Shell是Linux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序。 Linux/Unix提供了很多种Shell，为毛要这么多Shell？难道用来炒着吃么？那我问你，你同类型的衣服怎么有那么多件？花色，质地还不一样。写程序比买衣服复杂多了，而且程序员往往负责把复杂的事情搞简单，简单的事情搞复杂。牛程序员看到不爽的Shell，就会自己重新写一套，慢慢形成了一些标准，常用的Shell有这么几种，sh、bash、csh等” zsh强大之处在于命令补全，可以补齐路径，补齐命令，补齐参数等，只需按TAB键；另外还有跳转目录、通配符搜索、别名、历史记录等等…还有几百种插件拓展 安装zsh 1sudo apt install zsh 安装ohmyzsh 两种方式，二选其一 通过wget下载安装脚本 1sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)" 通过curl下载安装脚本 1sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" 更换主题及部分参数说明 123456789sudo nano ~/.zshrcexport PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/binexport TERM=xterm-256color //使终端支持256色，tput colors或echo $TERM显示是否正确开启ZSH_THEME="agnoster" //改为random会在每次打开终端或执行zsh随机选择一种主题风格plugins=(git autojump zsh-syntax-highlighting) //使用的插件DISABLE_AUTO_UPDATE="true" //关闭自动更新ENABLE_CORRECTION="true" //开启智能更正选项CASE_SENSITIVE="true" //对大小写敏感alias g='git' //别名设置 安装powerline字体 agnoster等主题依赖powerline字体，需安装缺失字体 123456789wget https://raw.githubusercontent.com/powerline/powerline/develop/font/10-powerline-symbols.confwget https://raw.githubusercontent.com/powerline/powerline/develop/font/PowerlineSymbols.otfsudo mkdir /usr/share/fontssudo mkdir /usr/share/fonts/OTFsudo cp 10-powerline-symbols.conf /usr/share/fonts/OTF/sudo mkdir /etc/fontssudo mkdir /etc/fonts/conf.dsudo mv 10-powerline-symbols.conf /etc/fonts/conf.d/sudo mv PowerlineSymbols.otf /usr/share/fonts/OTF/ 切换默认shell 1chsh -s /bin/zsh 插件 1ls ~/.oh-my-zsh/plugins //列出内置可用插件 直接在~/.zshrc里添加即可，部分需要安装，比如指令高亮插件： 12git clone git://github.com/jimmijj/zsh-syntax-highlighting ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlightingplugins=(zsh-syntax-highlighting) //终端命令提示，正确为绿色，错误为红色 我自己使用的插件（仅供参考）： 1plugins=(git sudo colored-man-pages last-working-dir command-not-found cp debian common-aliases dirhistory systemd extract autojump zsh-syntax-highlighting zsh-autosuggestions command-time you-should-use auto-ls) 部分插件说明 sudo //忘了加sudo只需按两下Esc键 colored-man-pages //man手册页面，高亮版，更容易阅读 last-working-dir //返回上次打开终端的目录 command-time //显示某命令执行完成所用的时间 zsh-autosuggestions //根据使用习惯自动显示建议，按→补充 zsh-you-should-use //提示可用的alias，可配置 dirhistory //使用alt+左右方向键来切换历史上级或下级目录 上面需自行安装的插件： 12345wget -O $ZSH_CUSTOM/auto-ls.zsh https://raw.githubusercontent.com/desyncr/auto-ls/master/auto-ls.zshgit clone git://github.com/jimmijj/zsh-syntax-highlighting ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlightinggit clone git://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestionsgit clone https://github.com/popstas/zsh-command-time.git ~/.oh-my-zsh/custom/plugins/command-timegit clone https://github.com/MichaelAquilina/zsh-you-should-use.git ~/.oh-my-zsh/custom/plugins/you-should-use 别名方案 仅供参考，可按个人使用习惯自行修改 1234567891011121314151617181920212223alias zshconfig="sudo nano ~/.zshrc"alias wget="wget -c"#alias df="pydf"alias du="du -h"alias df="df -Th"alias cp="cp -iv"alias mv="mv -iv"alias rm="rm -iv"alias ls="ls -F --color=auto"alias ll="ls -alF"alias la="ls -aF"alias lll="ls -Alh --sort=size . | tr -s " " | cut -d " " -f 5,9"alias dumax="du -hsx * | sort -rh | head -10"alias grep="grep --color=auto"alias fm="free -m"alias ua="uname -a"alias acs="apt-cache search"alias ats="sudo aptitude show"alias ati="sudo aptitude install -y"alias aud="sudo aptitude update &amp;&amp; sudo aptitude upgrade"alias cat="pygmentize -O style=borland -f console256 -g" alias nnao="nano"alias nano="sudo nano" 个人.zshrc完整配置 如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243export ZSH=$HOME/.oh-my-zshexport YSU_MODE=ALLexport TERM=xterm-256colorexport LANG=en_US.UTF-8ZSH_THEME="random"CASE_SENSITIVE="true"ENABLE_CORRECTION="true"HIST_STAMPS="yyyy-mm-dd"ZSH_COMMAND_TIME_MIN_SECONDS=1ZSH_COMMAND_TIME_ECHO=1[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.shplugins=(git sudo colored-man-pages last-working-dir command-not-found cp debian common-aliases dirhistory systemd extract autojump zsh-syntax-highlighting zsh-autosuggestions command-time you-should-use auto-ls)source $ZSH/oh-my-zsh.shalias zshconfig="sudo nano ~/.zshrc"alias wget="wget -c"#alias df="pydf"alias du="du -h"alias df="df -Th"alias cp="cp -iv"alias mv="mv -iv"alias rm="rm -iv"alias ls="ls -F --color=auto"alias ll="ls -alF"alias la="ls -aF"alias lll="ls -Alh --sort=size . | tr -s " " | cut -d " " -f 5,9"alias dumax="du -hsx * | sort -rh | head -10"alias grep="grep --color=auto"alias fm="free -m"alias ua="uname -a"alias acs="apt-cache search"alias ats="sudo aptitude show"alias ati="sudo aptitude install -y"alias aud="sudo aptitude update &amp;&amp; sudo aptitude upgrade"alias cat="pygmentize -O style=borland -f console256 -g" alias nnao="nano"alias nano="sudo nano"alias hn="hexo new"alias hs="hexo server --debug"alias hc="hexo clean --debug"alias hg="hexo generate --debug"alias hd="hexo deploy --debug"alias hcgs="hexo clean --debug &amp;&amp; hexo generate --debug &amp;&amp; hexo server --debug"alias hcgd="hexo clean --debug &amp;&amp; hexo generate --debug &amp;&amp; hexo deploy --debug" 参考文章： 你好，Oh My Zsh - 社区力量全新方式定义命令行 分享一下，你们都用了什么 oh my zsh 插件？ Linux终极shell-Z Shell–用强大的zsh &amp; oh-my-zsh把Bash换掉]]></content>
      <categories>
        <category>Linux</category>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Software</tag>
        <tag>Zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派-安装raspi-config]]></title>
    <url>%2F2017%2F09-04-%E6%A0%91%E8%8E%93%E6%B4%BE-%E5%AE%89%E8%A3%85raspi-config%2F</url>
    <content type="text"><![CDATA[20170904初成文 raspi-config在raspbian中是预装的，而在kali、ubuntu mate、osmc等系统中则是没有内置raspi-config的，但是raspi-config的gui设置有时是相对方便的，比如kali默认没有完整的使用整个SD卡空间，而针对树莓派最好的扩展工具是raspi-config 有时甚至可能误操作在raspbian中把raspi-config卸载了，而我自己也亲身经历了一次。。。 在其它系统中手动安装raspi-config的方法： 手动下载deb包 1wget http://mirrors.ustc.edu.cn/archive.raspberrypi.org/pool/main/r/raspi-config/raspi-config_20170811_all.deb 解决依赖问题 1sudo apt install whiptail parted lua5.1 alsa-utils psmisc 安装软件 1dpkg -i raspi-config_20170811_all.deb 运行raspi-config 需要root权限 1sudo raspi-config 挂载/boot分区 raspi-config能够运行的还有一个重要前提，boot分区已被正常挂载 先查看一下boot分区所在设备号 123fdisk -l再把它挂载到/boot上(以下是示例，不一定是mmcblk0p1，需根据实际情况决定)mount /dev/mmcblk0p1 /boot]]></content>
      <categories>
        <category>Linux</category>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Raspberry</tag>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派-neofetch配置]]></title>
    <url>%2F2017%2F09-04-%E6%A0%91%E8%8E%93%E6%B4%BE-neofetch%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[20170904 初成文，配置相关待完善 与Screenfetch相比，neofetch的logo图像非常接近，但是个性化可定制更高，支持信息更多，输出更快。比如logo定制、字体配色等多样玩法。 安装主程序 添加第三方repo，需要根据自己系统实际修改jessie为自己的版本号 1234echo "deb http://dl.bintray.com/dawidd6/neofetch jessie main" | sudo tee -a /etc/apt/sources.listcurl -L "https://bintray.com/user/downloadSubjectPublicKey?username=bintray" -o Release-neofetch.key &amp;&amp; sudo apt-key add Release-neofetch.key &amp;&amp; rm Release-neofetch.keysudo aptitude updatesudo aptitude install neofetch 配置 1sudo nano .config/neofetch/config.conf 设置显示logo，具体有哪些logo可以看ls /usr/share/neofetch/ascii/distro 1ascii_distro=&quot;auto&quot; 将需要显示的信息前面的注释符#去掉 1234567891011121314151617181920212223242526272829303132333435363738print_info() &#123; info title info underline info &quot;OS&quot; distro info &quot;Host&quot; model info &quot;Kernel&quot; kernel info &quot;Uptime&quot; uptime info &quot;Packages&quot; packages info &quot;Shell&quot; shell info &quot;Resolution&quot; resolution info &quot;DE&quot; de info &quot;WM&quot; wm info &quot;WM Theme&quot; wm_theme info &quot;Theme&quot; theme info &quot;Icons&quot; icons info &quot;Terminal&quot; term info &quot;Terminal Font&quot; term_font info &quot;CPU&quot; cpu info &quot;GPU&quot; gpu info &quot;Memory&quot; memory info &quot;GPU Driver&quot; gpu_driver # Linux only info &quot;CPU Usage&quot; cpu_usage info &quot;Disk&quot; disk info &quot;Battery&quot; battery info &quot;Font&quot; font info &quot;Song&quot; song info &quot;Local IP&quot; local_ip # info &quot;Public IP&quot; public_ip info &quot;Users&quot; users info &quot;Install Date&quot; install_date info &quot;Locale&quot; locale # This only works on glibc systems. info line_break info cols info line_break&#125; 显示磁盘空间信息，注意空格 12disk_show=(&apos;/&apos; &apos;/dev/sdb&apos; &apos;/dev/sdc&apos;)disk_subtitle=&quot;name&quot; 更详细信息config里见配置文件注释说明 避免多次修改config，配合ohmyzsh里的alias更佳。比如 12345678alias neofetch2=&quot;neofetch \--config off \--block_range 1 8 \--bold off \--uptime_shorthand on \--gtk_shorthand on \--colors 4 1 8 8 8 7 \&quot; 例图： 安卓logo OpenBSD_small Logo 参考： github-neofetch-Installation github-neofetch-custom]]></content>
      <categories>
        <category>Linux</category>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Software</tag>
        <tag>Neofetch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派3B之CPUGPU和内存超频稳定性测试]]></title>
    <url>%2F2017%2F09-02-%E6%A0%91%E8%8E%93%E6%B4%BE3B%E4%B9%8BCPUGPU%E5%92%8C%E5%86%85%E5%AD%98%E8%B6%85%E9%A2%91%E7%A8%B3%E5%AE%9A%E6%80%A7%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[20170902 初成文 20170920 更新sdram超频参数说明 2017-10-05 更新内存超频、添加nbench性能跑分 测试环境 本人测试成功的系统:Raspbian Jessie/Stretch,DietPi,OSMC,LibreELEC 本文示例使用系统：Raspbian Stretch Lite（2017-08-16） 供电：三星充电器5.3V 2A 散热：3块散热铝片+5v小风扇花式接3.3v针脚（5v太吵…） 外壳：全透明亚克力外壳 超频方法 最好先更新一下固件以支持最新的超频选项 1sudo rpi-update Win下用Notepad++编辑/boot分区（FAT32格式）下的config.txt Raspbian下需要在root权限(sudo nano /boot/config.txt)下编辑，重启生效 超频参数参考及说明 以下为个人树莓派上通过稳定性测试的超频参数，仅供参考。不同板子会存在体质差异，不一定适合以下配置，建议自行摸索。比如别人能稳定超到1.45g而个人板子超到1450（提高约21%）能开机，但压力测试时会出现死机现象。最好先对CPU超频通过稳定性测试后，再对内存超频，否则可能无法知道是哪个原因导致超频失败。 主频性能大约提升16.7%，（1400-1200）/1200=16.7% 12345678910over_voltage=5arm_freq=1400core_freq=500gpu_freq=500dtparam=sd_overclock=100temp_limit=85#force_turbo=1over_voltage_sdram=2sdram_freq=600sdram_schmoo=0x02000020 解释： 123456789101112131415161718192021over_voltage //CPU/GPU电压，有效值为[-16,8]，0对应1.2v，步进为0.025v，超过6需要同时配合force_turbo=1才生效。个人测试是达到5是1.394v，再高的值电压也不再增加。arm_freq //ARM CPU主频，默认值为1200gpu_freq //同时对core_freq,h264_freq,isp_freq, v3d_freq超频，core_freq默认值为400， h264_freq、isp_freq、v3d_freq默认值为300core_freq //GPU核心主频，默认400，对内存读写速度有一点好处dtparam=sd_overclock //默认50，SD卡超频，该项设置没有危险，默认值低是为了提高兼容性，一般的卡都可以放心调整到100，重启后执行dmesg | grep &quot;mmc0&quot;见mmc0: overclocking to 100000000Hztemp_limit //过热保护。默认值为85，过热降频。不建议长期运行在70度以上，高温对芯片寿命影响较大。force_turbo //=1时一直运行在高性能模式下，策略为scaling_governor=performance；=0时根据cpu利用率动态调频,默认策略为scaling_governor=ondemand。有五种调节策略，performance/powersave/userspace/ondemand/conservative，可通过以下命令更改策略（必须root用户下）echo conservative &gt; /sys/devices/system/cpu/cpu0/cpufreq/scaling_governorover_voltage_sdram //[-16,8]，同时设置over_voltage_sdram_c（control），over_voltage_sdram_i（I/O）, over_voltage_sdram_p(phy)电压sdram_freq //内存工作频率，默认450MHzsdram_schmoo//内存部分时序4,3,2,0,0,-2,-2,0,-10，提高性能和稳定性，分别对应如下int8_t dphy_drive_level; // 4..0 -&gt; 34R,40R,48R,60R,80Rint8_t aphy_drive_level; // 4..0 -&gt; 34R,40R,48R,60R,80Rint8_t dram_drive_level; // 4..-1 -&gt; 34R,40R,48R,60R,80R,120Ruint8_t dphy_lpwr_rx; // Non-zero for LPWR_RX in DPHYuint8_t aphy_lpwr_rx; // Non-zero for LPWR_RX in APHYint8_t dll_offset_rd_n; // DLL offset schmoo: Low phase Readint8_t dll_offset_rd_p; // DLL offset schmoo: High phase Readint8_t dll_offset_wr; // DLL offset schmoo: DQ/DQS Writeint8_t dll_offset_addr; // DLL offset schmoo: Address/command 性能测试、压力测试、状态监测、稳定性测试 性能测试 表示创建4个线程来寻找 √￣20000 以内的质数： 1sysbench --num-threads=4 --test=cpu --cpu-max-prime=20000 run 未超频前total time=92.5s，超频后total time=79.3s，提升约15%符合预期 另一个性能测试跑分软件是nbench（原程序http://www.byte.com/bmark/bmark.htm。但2010年关闭了） 12345wget http://www.math.utah.edu/~mayer/linux/nbench-byte-2.2.3.tar.gztar -xvzf nbench-byte-2.2.3.tar.gzcd nbench-byte-2.2.3make./nbench nbench跑分整数和浮点数分数39.013与180239 cpu压力测试 建议压力测试至少10分钟或以上，无出错/死机 12sudo apt install stressstress -c 4 -t 10m -v 注意需要同时留意CPU/GPU温度不超过85度，下面两条命令均可： 12vcgencmd measure_tempcat /sys/class/thermal/thermal_zone0/temp 内存压力测试 一个memtester占用一个核心，打开四个窗口运行四次sudo memtester 210M -1可加快测试速度,因为需要cpu生成随机序列来对内存进行频繁读写，所以cpu占用会比较高，因此该测试可以同时对cpu和内存进行稳定性测试。该测试大约10分钟左右 12sudo apt install memtestersudo memtester 840M -1 内存稳定性测试不通过会出现如下图failure字样，在日常工作中可能会出现不稳定现象。 检测部分 CPU和内存电压 1for id in core sdram_c sdram_i sdram_p ; do echo -e "$id:\t$(vcgencmd measure_volts $id)" ; done 各项频率 超频是否成功，arm项返回1400000*，如果其它也超频了，也会显示运行频率 1for src in arm core h264 isp v3d uart pwm emmc pixel vec hdmi dpi ; do echo -e "$src:\t$(vcgencmd measure_clock $src)" ; done 另一种查看cpu频率的方法 1sudo cat /sys/devices/system/cpu/cpu2/cpufreq/cpuinfo_cur_freq SD卡超频检测 1dmesg | grep "mmc0" //看到mmc0: overclocking to 100000000Hz即成功 内存读写速度 按Ctrl+C结束 1dd if=/dev/zero of=/dev/null SD卡读写速度 第一行，生成1024MB大小的文件内容为0的文件，生成速度取决于sd卡写入速度 第二行 ，将刚才生成的文件删除，取决于sd卡读取速度 12dd if=/dev/zero of=test bs=1M count=1024 oflag=directdd if=test of=/dev/null bs=1M oflag=direct 1sudo hdparm -tT /dev/mmcblk0 //-t是测试硬盘读写速率，-T是测试缓存读写速率 编码启用情况 1for codec in H264 MPG2 WVC1 MPG4 MJPG WMV9 ; do echo -e "$codec:\t$(vcgencmd codec_enabled $codec)" ; done CPU和GPU内存分配 1vcgencmd get_mem arm &amp;&amp; vcgencmd get_mem gpu 临时关闭超频 如果超频失败，无法启动，可以在启动时按住shift临时关闭所有超频选项，进入系统后再进行修改。 主要参考文章： 树莓派官方文档–config.txt 树莓派2代B型性能极限测试 cpufreq 五种模式 sysbench 压力测试 dd命令详解]]></content>
      <categories>
        <category>Linux</category>
        <category>Raspbian</category>
        <category>Overclock</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Raspberry</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派pt下载机-Deluge-Transmission-Rtorrent]]></title>
    <url>%2F2017%2F09-01-%E6%A0%91%E8%8E%93%E6%B4%BEpt%E4%B8%8B%E8%BD%BD%E6%9C%BA-Deluge-Transmission-Rtorrent%2F</url>
    <content type="text"><![CDATA[Linux下PT三大客户端，Deluge、Transmission、Rtorrent 安装deluge 安装主程序 12sudo aptitude updatesudo aptitude install deluge deluged deluge-web 访问地址：（默认密码deluge） http://树莓派ip地址:8112 添加开机启动项 新建nano /etc/init.d/deluge-web加入下面两行 12#/bin/bash/usr/bin/deluge-web --fork 执行update-rc.d deluge-web defaults 19建立链接， ‘defaults’ 指默认运行级别, 它可以是 2 到 5 中某个值. 参数 ‘19’ 确保 deluge-web脚本 在其它参数大于 20 的脚本之前执行. 安装transmission 安装主程序 1234567sudo aptitude install transmission-daemonsudo /etc/init.d/transmission-daemon stop //或sudo systemctl stop transmission-daemonsudo nano /etc/transmission-daemon/settings.json"rpc-username": "transmission" //修改登陆用户名"rpc-password": "123", //修改登陆密码"rpc-whitelist": "*", //修改白名单sudo /etc/init.d/transmission-daemon start //或sudo systemctl start transmission-daemon 访问地址：（默认用户名transmission，可在settings.json修改） http://树莓派ip地址:9091 安装transmission面板 12wget https://github.com/ronggang/transmission-web-control/raw/master/release/tr-control-easy-install.shsudo bash tr-control-easy-install.sh 安装rtorrent和irssi 安装主程序 推荐用一键脚本，带irssi 123sudo bash -c &quot;$(wget --no-check-certificate -qO - https://raw.githubusercontent.com/arakasi72/rtinst/master/rtsetup)&quot;sudo rtinst --ssh-default --rutorrent-master //安装master分支，ssh端口号不改变sudo nano ~/.rtorrent.rc //修改配置 其它常用命令 1234rt restart //重启rtrt -i restart //重启irssisudo rtupdate //更换版本sudo rtsetup release //切换分支 访问地址： http://树莓派ip地址/rutorrent/ 或 https://树莓派ip地址/rutorrent/ rt配置参考 由于树莓派性能一般，配置参考： 12345678910111213141516throttle.global_down.max_rate.set = 0throttle.global_up.max_rate.set = 0throttle.max_downloads.global.set = 300throttle.max_uploads.global.set = 300throttle.min_peers.normal.set = 99throttle.max_peers.normal.set = 100throttle.min_peers.seed.set = -1throttle.max_peers.seed.set = -1throttle.max_downloads.set = 50throttle.max_uploads.set = 50trackers.numwant.set = 100network.max_open_files.set = 600network.max_open_sockets.set = 999network.http.max_open.set = 99pieces.memory.max.set = 800Mnetwork.http.dns_cache_timeout.set = 25 参考文章： Debian开机启动 transmission一键安装脚本 rtorrent一键安装脚本 rt配置参考]]></content>
      <categories>
        <category>Linux</category>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Software</tag>
        <tag>Deluge</tag>
        <tag>Transmission</tag>
        <tag>Rtorrent</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派NAS-OMV简单配置篇二]]></title>
    <url>%2F2017%2F09-01-%E6%A0%91%E8%8E%93%E6%B4%BENAS-OMV%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%E7%AF%87%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[上文：树莓派NAS-OMV安装篇一 由于OMV配置相对简单，本文不将详述，仅介绍相对重要或可能用到的选项。 修改OMV源 目前共有三个软件源可选 1sudo nano /etc/apt/sources.list.d/openmediavault.list 添加以下，选其中一个即可 123deb http://packages.openmediavault.org/public erasmusr main partnerdeb http://downloads.sourceforge.net/project/openmediavault/packages erasmus main partnerdeb https://openmediavault.github.io/packages/ erasmus main partner Samba 先在“文件系统”挂载磁盘，再在“共享文件夹”添加需要共享的文件夹，但此时并不会真正的共享，还需要在服务里把这个文件夹共享出去。需要注意的是: 挂载的分区需要有label（标签）才会在“系统信息→性能统计”里被监控，如下图所示。 挂载的分区不建议为ntfs，因为大量读写时会频繁调用ntfs-3g造成cpu负载过高。 设置用户和用户组访问权限，两个都要设置 服务→SMB/CIFS，启用打开，应用使其生效。 分享，添加刚才共享的文件夹，允许访客意思为可以不验证密码就能读写。 然后在windows里输入\\树莓派的ip地址就能看到共享的文件夹 如果在samba共享中设置了仍没有写权限，试一下chmod 777 /srv/*** BT/PT下载机 transmission和deluge可在omv里直接安装; rutorrent和omv有冲突，但可在docker里安装。 安装transmission和deluge 12sudo aptitude install openmediavault-transmissionbtsudo aptitude install openmediavault-deluge 注意的是transmission需要在omv管理页面设置好下载目录，以及启用RPC 安装transmission管理面板 12wget https://github.com/ronggang/transmission-web-control/raw/master/release/tr-control-easy-install.shsudo bash tr-control-easy-install.sh transmission:http://IP地址:9091/transmission/web/ deluge:http://IP地址:8112/ docker里安装rt 点击Pull Image，软件源输入sdelrio/rpi-torrent-box，tag留空，默认为latest，点击开始，可能需时较久，约5分钟，如下图 或者直接在终端里输入 1sudo docker pull sdelrio/rpi-torrent-box 部署容器 选中docker，然后点击Run Image 设置端口转发，因为80端口被omv占用，所以设置为其它端口如8081，记得点击右边的添加按钮，如下图 若需要容器在系统启动时就自动运行需要勾选开机启动选项。 容器默认是只能读取外部路径的，没有写权限，那么可以开启特权运行模式，这样会有读写权限。 网络设置有Bridge和Host两种，前者是手动设置端口转发，比如容器默认端口是80，那么我转发到主机的8181端口，访问地址“主机IP:8181”。后者是直接使用主机的端口，默认是8096那么直接使用主机8096端口，访问方式就是“主机IP:8096”。 环境变量那里一般不需要改，若镜像有特殊要求再手动修改，如修改密码。 卷绑定那里是绑定外部存储路径到容器，否则容器与主机是隔离的，不能读取到外部文件，只有这里绑定了才能读取。 最后一项是使用其它容器的目录，有时候多个容器有共同的数据目录可以使用该选项设置。 切记选项后面有个添加符“+”，要添加了才生效，只填了是不会生效的。路径前面的/标志别忘了，否则报错。 运行容器 选择要运行的容器点击开始，输入先前设定的端口就可以访问了。 简述 更改webgui端口号，超时退出和登陆密码 更改日期时间，如不正确，系统数据监测也可能会不正确。 网络→接口，添加相应网卡，以便系统信息监测流量。 电源管理→计划任务，可以执行定时关机重启等 监测，打开后可在“系统信息→性能统计”查看CPU使用率、负载、内存分配、磁盘使用情况，网络吞吐量等 计划任务，定时执行自定义命令 OMV-Extra、插件，是omv的软件库。 S.M.A.R.T，读取磁盘的smart信息，仅供参考，个人认为不太准确。 Raid管理，组建Raid0/1/5/6等 文件系统，建议使用ext4格式，ntfs格式的磁盘读写需要调用ntfs-3g，cpu使用率较大。 用户、用户组、共享文件夹，设置文件夹权限。 服务为omv软件仓库安装后的软件，不详述。 仪表盘和系统信息，监测系统运行状态。 参考文章: rtorrent docker 一段香-OpenMediaVault插件之Docker教程]]></content>
      <categories>
        <category>Linux</category>
        <category>OMV</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>NAS</tag>
        <tag>OMV</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派NAS-OMV安装篇一]]></title>
    <url>%2F2017%2F09-01-%E6%A0%91%E8%8E%93%E6%B4%BENAS-OMV%E5%AE%89%E8%A3%85%E7%AF%87%E4%B8%80%2F</url>
    <content type="text"><![CDATA[20170902 初成文 建议直接使用OMV树莓派官方版镜像，Win32DiskImager写进SD卡，本文是介绍基于Debian8上安装OMV3.X 跑nas之前做过大量压力测试，usb外接硬盘(ext4；用ntfs是很难满速的，调用ntfs-3g还得占用cpu)读写百兆网卡可以达到满速，可以跑docker，bt/pt常用下载工具正常使用。 蓝光原盘码率大都在50Mbps以下，百兆带宽已经绰绰有余，实测局域网可以同时流畅播放两个原盘，也还算满意。 安装大部分应用后界面，可跑docker 目前稳定版OpenMediaVault 3.X.X（erasmus）是基于Debian8的，所以只能安装在基于Debian8的Jessie上，比如DietPi（Jessie）和Raspbian（2017-7-5及以前版本）。 更换软件源 更换官方默认软件源为清华软件源 12sudo sed -i 's#://mirrordirector.raspbian.org#s://mirrors.tuna.tsinghua.edu.cn/raspbian#g' /etc/apt/sources.list sudo sed -i 's#://archive.raspberrypi.org/debian#s://mirrors.tuna.tsinghua.edu.cn/raspberrypi#g' /etc/apt/sources.list.d/raspi.list 添加OMV的软件源 这步需要在root权限下，因为sudo只是让 echo 命令具有了 root 权限， 但是没有让 &gt;命令也具有root 权限。 123sudo suecho "deb http://packages.openmediavault.org/public erasmus main" &gt; /etc/apt/sources.list.d/openmediavault.listexit 或直接使用 1sudo sh -c 'echo "deb http://packages.openmediavault.org/public erasmus main" &gt; /etc/apt/sources.list.d/openmediavault.list' 更新(不建议，缺少大量插件):目前已发布测试版OMV4.X，基于Debian9（可在Raspbian Stretch上安装），此步将erasmus改为arrakis，其余不变，即： 123sudo suecho "deb http://packages.openmediavault.org/public arrakis main" &gt; /etc/apt/sources.list.d/openmediavault.listexit 设置环境变量 123export LANG=Cexport DEBIAN_FRONTEND=noninteractiveexport APT_LISTCHANGES_FRONTEND=none 开始安装 12345sudo aptitude install dirmngrsudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 7E7A6C592EF35D13 24863F0C716B980Bsudo aptitude updatesudo aptitude --allow-unauthenticated install openmediavault-keyringsudo apt --yes --force-yes --auto-remove --show-upgraded --no-install-recommends --option Dpkg::Options::="--force-confdef" --option DPkg::Options::="--force-confold" install postfix openmediavault 注意点： 出现Postfix Configuration选择的时候，选择No configuration 出现Configuring mdadm的时候，键入none. Do you want to start MD arrays automatically?选择YES When the \'ProFTPD configuration\' dialogue is displayed choose选择standalone 初始化系统和数据库 重启前须注意配置好ssh 12345sudo apt install resolvconfsudo omv-initsystem //初始化sudo nano /etc/ssh/sshd_config //AllowGroups添加ssh远程用户sudo /etc/init.d/ssh restartsudo reboot now 安装最新版插件包 OMV3.X 12wget http://omv-extras.org/openmediavault-omvextrasorg_latest_all3.debsudo dpkg -i openmediavault-omvextrasorg_latest_all3.deb 对于OMV4.X将上面的3改为4即可： 12wget http://omv-extras.org/openmediavault-omvextrasorg_latest_all4.debsudo dpkg -i openmediavault-omvextrasorg_latest_all4.deb 直接在浏览器输入树莓派ip地址，初始账户为admin密码为openmediavault 其他常用命令 更新OMV版本为最新： 1sudo omv-update OMV修复工具（IP配置重设、WEBGUI端口重置、密码修改、重置登录失败次数锁定、配置备份恢复、更新apt缓存）： 1sudo omv-firstaid 配置相关请参考文章树莓派NAS-OMV简单配置篇二 参考文章: Install OMV3 on Debian Jessie]]></content>
      <categories>
        <category>Linux</category>
        <category>OMV</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>NAS</tag>
        <tag>OMV</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F01-01-hello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new "My New Post" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>test</category>
        <category>HelloWorld</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
